// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// StorageServiceParamType storage service param type
// swagger:model storageServiceParamType
type StorageServiceParamType string

const (

	// StorageServiceParamTypeSTRING captures enum value "STRING"
	StorageServiceParamTypeSTRING StorageServiceParamType = "STRING"

	// StorageServiceParamTypeNUMBER captures enum value "NUMBER"
	StorageServiceParamTypeNUMBER StorageServiceParamType = "NUMBER"

	// StorageServiceParamTypeBOOLEAN captures enum value "BOOLEAN"
	StorageServiceParamTypeBOOLEAN StorageServiceParamType = "BOOLEAN"

	// StorageServiceParamTypePASSWORD captures enum value "PASSWORD"
	StorageServiceParamTypePASSWORD StorageServiceParamType = "PASSWORD"

	// StorageServiceParamTypeSELECT captures enum value "SELECT"
	StorageServiceParamTypeSELECT StorageServiceParamType = "SELECT"
)

// for schema
var storageServiceParamTypeEnum []interface{}

func init() {
	var res []StorageServiceParamType
	if err := json.Unmarshal([]byte(`["STRING","NUMBER","BOOLEAN","PASSWORD","SELECT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageServiceParamTypeEnum = append(storageServiceParamTypeEnum, v)
	}
}

func (m StorageServiceParamType) validateStorageServiceParamTypeEnum(path, location string, value StorageServiceParamType) error {
	if err := validate.Enum(path, location, value, storageServiceParamTypeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this storage service param type
func (m StorageServiceParamType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateStorageServiceParamTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
