// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// StorageStoreStatus storage store status
// swagger:model storageStoreStatus
type StorageStoreStatus string

const (

	// StorageStoreStatusPROVISIONING captures enum value "PROVISIONING"
	StorageStoreStatusPROVISIONING StorageStoreStatus = "PROVISIONING"

	// StorageStoreStatusUPDATING captures enum value "UPDATING"
	StorageStoreStatusUPDATING StorageStoreStatus = "UPDATING"

	// StorageStoreStatusENABLING captures enum value "ENABLING"
	StorageStoreStatusENABLING StorageStoreStatus = "ENABLING"

	// StorageStoreStatusENABLED captures enum value "ENABLED"
	StorageStoreStatusENABLED StorageStoreStatus = "ENABLED"

	// StorageStoreStatusDISABING captures enum value "DISABING"
	StorageStoreStatusDISABING StorageStoreStatus = "DISABING"

	// StorageStoreStatusDISABLED captures enum value "DISABLED"
	StorageStoreStatusDISABLED StorageStoreStatus = "DISABLED"

	// StorageStoreStatusLOCKING captures enum value "LOCKING"
	StorageStoreStatusLOCKING StorageStoreStatus = "LOCKING"

	// StorageStoreStatusLOCKED captures enum value "LOCKED"
	StorageStoreStatusLOCKED StorageStoreStatus = "LOCKED"

	// StorageStoreStatusERROR captures enum value "ERROR"
	StorageStoreStatusERROR StorageStoreStatus = "ERROR"

	// StorageStoreStatusDELETING captures enum value "DELETING"
	StorageStoreStatusDELETING StorageStoreStatus = "DELETING"

	// StorageStoreStatusDELETED captures enum value "DELETED"
	StorageStoreStatusDELETED StorageStoreStatus = "DELETED"
)

// for schema
var storageStoreStatusEnum []interface{}

func init() {
	var res []StorageStoreStatus
	if err := json.Unmarshal([]byte(`["PROVISIONING","UPDATING","ENABLING","ENABLED","DISABING","DISABLED","LOCKING","LOCKED","ERROR","DELETING","DELETED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageStoreStatusEnum = append(storageStoreStatusEnum, v)
	}
}

func (m StorageStoreStatus) validateStorageStoreStatusEnum(path, location string, value StorageStoreStatus) error {
	if err := validate.Enum(path, location, value, storageStoreStatusEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this storage store status
func (m StorageStoreStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateStorageStoreStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
