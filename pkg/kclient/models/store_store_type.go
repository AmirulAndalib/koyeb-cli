// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// StoreStoreType store store type
// swagger:model StoreStoreType
type StoreStoreType string

const (

	// StoreStoreTypeManaged captures enum value "managed"
	StoreStoreTypeManaged StoreStoreType = "managed"

	// StoreStoreTypeAws captures enum value "aws"
	StoreStoreTypeAws StoreStoreType = "aws"

	// StoreStoreTypeGcp captures enum value "gcp"
	StoreStoreTypeGcp StoreStoreType = "gcp"

	// StoreStoreTypeAzure captures enum value "azure"
	StoreStoreTypeAzure StoreStoreType = "azure"

	// StoreStoreTypeDigitalocean captures enum value "digitalocean"
	StoreStoreTypeDigitalocean StoreStoreType = "digitalocean"

	// StoreStoreTypeLinode captures enum value "linode"
	StoreStoreTypeLinode StoreStoreType = "linode"

	// StoreStoreTypeScaleway captures enum value "scaleway"
	StoreStoreTypeScaleway StoreStoreType = "scaleway"

	// StoreStoreTypeVultr captures enum value "vultr"
	StoreStoreTypeVultr StoreStoreType = "vultr"

	// StoreStoreTypeCustom captures enum value "custom"
	StoreStoreTypeCustom StoreStoreType = "custom"
)

// for schema
var storeStoreTypeEnum []interface{}

func init() {
	var res []StoreStoreType
	if err := json.Unmarshal([]byte(`["managed","aws","gcp","azure","digitalocean","linode","scaleway","vultr","custom"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storeStoreTypeEnum = append(storeStoreTypeEnum, v)
	}
}

func (m StoreStoreType) validateStoreStoreTypeEnum(path, location string, value StoreStoreType) error {
	if err := validate.Enum(path, location, value, storeStoreTypeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this store store type
func (m StoreStoreType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateStoreStoreTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
