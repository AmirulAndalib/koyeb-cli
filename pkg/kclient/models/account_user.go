// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AccountUser User
//
// Represent a User
// swagger:model accountUser
type AccountUser struct {

	// avatar url
	AvatarURL string `json:"avatar_url,omitempty"`

	// beta
	Beta bool `json:"beta,omitempty"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// default organization id
	DefaultOrganizationID string `json:"default_organization_id,omitempty"`

	// email
	Email string `json:"email,omitempty"`

	// firstname
	Firstname string `json:"firstname,omitempty"`

	// fullname
	Fullname string `json:"fullname,omitempty"`

	// github id
	GithubID string `json:"github_id,omitempty"`

	// github user
	GithubUser string `json:"github_user,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// last login
	// Format: date-time
	LastLogin strfmt.DateTime `json:"last_login,omitempty"`

	// last login ip
	LastLoginIP string `json:"last_login_ip,omitempty"`

	// lastname
	Lastname string `json:"lastname,omitempty"`

	// newsletter subscribed
	NewsletterSubscribed bool `json:"newsletter_subscribed,omitempty"`

	// status
	Status AccountUserAccountStatus `json:"status,omitempty"`

	// status message
	StatusMessage string `json:"status_message,omitempty"`

	// two factor authentication
	TwoFactorAuthentication bool `json:"two_factor_authentication,omitempty"`

	// updated at
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`

	// verified
	Verified bool `json:"verified,omitempty"`
}

// Validate validates this account user
func (m *AccountUser) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastLogin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountUser) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AccountUser) validateLastLogin(formats strfmt.Registry) error {

	if swag.IsZero(m.LastLogin) { // not required
		return nil
	}

	if err := validate.FormatOf("last_login", "body", "date-time", m.LastLogin.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AccountUser) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		}
		return err
	}

	return nil
}

func (m *AccountUser) validateUpdatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccountUser) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountUser) UnmarshalBinary(b []byte) error {
	var res AccountUser
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
