// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// StorageManagedStoreBodyStatus storage managed store body status
// swagger:model storageManagedStoreBodyStatus
type StorageManagedStoreBodyStatus string

const (

	// StorageManagedStoreBodyStatusDISABLED captures enum value "DISABLED"
	StorageManagedStoreBodyStatusDISABLED StorageManagedStoreBodyStatus = "DISABLED"

	// StorageManagedStoreBodyStatusENABLED captures enum value "ENABLED"
	StorageManagedStoreBodyStatusENABLED StorageManagedStoreBodyStatus = "ENABLED"

	// StorageManagedStoreBodyStatusLOCKED captures enum value "LOCKED"
	StorageManagedStoreBodyStatusLOCKED StorageManagedStoreBodyStatus = "LOCKED"

	// StorageManagedStoreBodyStatusERROR captures enum value "ERROR"
	StorageManagedStoreBodyStatusERROR StorageManagedStoreBodyStatus = "ERROR"
)

// for schema
var storageManagedStoreBodyStatusEnum []interface{}

func init() {
	var res []StorageManagedStoreBodyStatus
	if err := json.Unmarshal([]byte(`["DISABLED","ENABLED","LOCKED","ERROR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageManagedStoreBodyStatusEnum = append(storageManagedStoreBodyStatusEnum, v)
	}
}

func (m StorageManagedStoreBodyStatus) validateStorageManagedStoreBodyStatusEnum(path, location string, value StorageManagedStoreBodyStatus) error {
	if err := validate.Enum(path, location, value, storageManagedStoreBodyStatusEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this storage managed store body status
func (m StorageManagedStoreBodyStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateStorageManagedStoreBodyStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
