// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// StorageServiceStatus storage service status
// swagger:model storageServiceStatus
type StorageServiceStatus string

const (

	// StorageServiceStatusNOTCONFIGURED captures enum value "NOT_CONFIGURED"
	StorageServiceStatusNOTCONFIGURED StorageServiceStatus = "NOT_CONFIGURED"

	// StorageServiceStatusVALIDATING captures enum value "VALIDATING"
	StorageServiceStatusVALIDATING StorageServiceStatus = "VALIDATING"

	// StorageServiceStatusVALID captures enum value "VALID"
	StorageServiceStatusVALID StorageServiceStatus = "VALID"

	// StorageServiceStatusERROR captures enum value "ERROR"
	StorageServiceStatusERROR StorageServiceStatus = "ERROR"
)

// for schema
var storageServiceStatusEnum []interface{}

func init() {
	var res []StorageServiceStatus
	if err := json.Unmarshal([]byte(`["NOT_CONFIGURED","VALIDATING","VALID","ERROR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageServiceStatusEnum = append(storageServiceStatusEnum, v)
	}
}

func (m StorageServiceStatus) validateStorageServiceStatusEnum(path, location string, value StorageServiceStatus) error {
	if err := validate.Enum(path, location, value, storageServiceStatusEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this storage service status
func (m StorageServiceStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateStorageServiceStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
