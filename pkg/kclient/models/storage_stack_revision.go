// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StorageStackRevision The actual concrete definition of a stack.
// swagger:model storageStackRevision
type StorageStackRevision struct {

	// Information about the commit that generated this revision (potentially absent)
	CommitInfo *StorageCommitInfo `json:"commit_info,omitempty"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// The sha of the previous revision of this stack (empty if it's the first revision)
	ParentSha string `json:"parent_sha,omitempty"`

	// The sha of the revision
	Sha string `json:"sha,omitempty"`

	// status
	Status StorageStackRevisionStatus `json:"status,omitempty"`

	// status message
	StatusMessage string `json:"status_message,omitempty"`

	// The version of the schema definition
	Version string `json:"version,omitempty"`

	// The raw yaml
	Yaml string `json:"yaml,omitempty"`
}

// Validate validates this storage stack revision
func (m *StorageStackRevision) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommitInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageStackRevision) validateCommitInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.CommitInfo) { // not required
		return nil
	}

	if m.CommitInfo != nil {
		if err := m.CommitInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commit_info")
			}
			return err
		}
	}

	return nil
}

func (m *StorageStackRevision) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *StorageStackRevision) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StorageStackRevision) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageStackRevision) UnmarshalBinary(b []byte) error {
	var res StorageStackRevision
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
