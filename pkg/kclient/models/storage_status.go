// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// StorageStatus storage status
// swagger:model storageStatus
type StorageStatus string

const (

	// StorageStatusPROVISIONING captures enum value "PROVISIONING"
	StorageStatusPROVISIONING StorageStatus = "PROVISIONING"

	// StorageStatusENABLING captures enum value "ENABLING"
	StorageStatusENABLING StorageStatus = "ENABLING"

	// StorageStatusENABLED captures enum value "ENABLED"
	StorageStatusENABLED StorageStatus = "ENABLED"

	// StorageStatusDISABING captures enum value "DISABING"
	StorageStatusDISABING StorageStatus = "DISABING"

	// StorageStatusDISABLED captures enum value "DISABLED"
	StorageStatusDISABLED StorageStatus = "DISABLED"

	// StorageStatusLOCKING captures enum value "LOCKING"
	StorageStatusLOCKING StorageStatus = "LOCKING"

	// StorageStatusLOCKED captures enum value "LOCKED"
	StorageStatusLOCKED StorageStatus = "LOCKED"

	// StorageStatusERROR captures enum value "ERROR"
	StorageStatusERROR StorageStatus = "ERROR"

	// StorageStatusDELETING captures enum value "DELETING"
	StorageStatusDELETING StorageStatus = "DELETING"

	// StorageStatusDELETED captures enum value "DELETED"
	StorageStatusDELETED StorageStatus = "DELETED"
)

// for schema
var storageStatusEnum []interface{}

func init() {
	var res []StorageStatus
	if err := json.Unmarshal([]byte(`["PROVISIONING","ENABLING","ENABLED","DISABING","DISABLED","LOCKING","LOCKED","ERROR","DELETING","DELETED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageStatusEnum = append(storageStatusEnum, v)
	}
}

func (m StorageStatus) validateStorageStatusEnum(path, location string, value StorageStatus) error {
	if err := validate.Enum(path, location, value, storageStatusEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this storage status
func (m StorageStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateStorageStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
