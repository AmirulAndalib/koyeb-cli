// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StorageCatalogServiceBody storage catalog service body
// swagger:model storageCatalogServiceBody
type StorageCatalogServiceBody struct {

	// author
	Author string `json:"author,omitempty"`

	// available services
	AvailableServices []string `json:"available_services"`

	// description
	Description string `json:"description,omitempty"`

	// display name
	DisplayName string `json:"display_name,omitempty"`

	// icon
	Icon string `json:"icon,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// parameters
	Parameters map[string]StorageServiceParam `json:"parameters,omitempty"`

	// repository
	Repository string `json:"repository,omitempty"`

	// short description
	ShortDescription string `json:"short_description,omitempty"`

	// status
	Status StorageCatalogItemStatus `json:"status,omitempty"`

	// tags
	Tags []string `json:"tags"`

	// vendor
	Vendor string `json:"vendor,omitempty"`

	// website
	Website string `json:"website,omitempty"`
}

// Validate validates this storage catalog service body
func (m *StorageCatalogServiceBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageCatalogServiceBody) validateParameters(formats strfmt.Registry) error {

	if swag.IsZero(m.Parameters) { // not required
		return nil
	}

	for k := range m.Parameters {

		if err := validate.Required("parameters"+"."+k, "body", m.Parameters[k]); err != nil {
			return err
		}
		if val, ok := m.Parameters[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *StorageCatalogServiceBody) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StorageCatalogServiceBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageCatalogServiceBody) UnmarshalBinary(b []byte) error {
	var res StorageCatalogServiceBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
