// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StorageBrowseStackReply storage browse stack reply
// swagger:model storageBrowseStackReply
type StorageBrowseStackReply struct {

	// common prefixes
	CommonPrefixes []*StorageBrowseStackCommonPrefixBody `json:"common_prefixes"`

	// contents
	Contents []*StorageBrowseStackObjectBody `json:"contents"`

	// continuation token
	ContinuationToken string `json:"continuation_token,omitempty"`

	// delimiter
	Delimiter string `json:"delimiter,omitempty"`

	// is truncated
	IsTruncated bool `json:"is_truncated,omitempty"`

	// key count
	KeyCount int64 `json:"key_count,omitempty"`

	// max keys
	MaxKeys int64 `json:"max_keys,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// next continuation token
	NextContinuationToken string `json:"next_continuation_token,omitempty"`

	// prefix
	Prefix string `json:"prefix,omitempty"`

	// start after
	StartAfter string `json:"start_after,omitempty"`
}

// Validate validates this storage browse stack reply
func (m *StorageBrowseStackReply) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommonPrefixes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContents(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageBrowseStackReply) validateCommonPrefixes(formats strfmt.Registry) error {

	if swag.IsZero(m.CommonPrefixes) { // not required
		return nil
	}

	for i := 0; i < len(m.CommonPrefixes); i++ {
		if swag.IsZero(m.CommonPrefixes[i]) { // not required
			continue
		}

		if m.CommonPrefixes[i] != nil {
			if err := m.CommonPrefixes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("common_prefixes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StorageBrowseStackReply) validateContents(formats strfmt.Registry) error {

	if swag.IsZero(m.Contents) { // not required
		return nil
	}

	for i := 0; i < len(m.Contents); i++ {
		if swag.IsZero(m.Contents[i]) { // not required
			continue
		}

		if m.Contents[i] != nil {
			if err := m.Contents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("contents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *StorageBrowseStackReply) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageBrowseStackReply) UnmarshalBinary(b []byte) error {
	var res StorageBrowseStackReply
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
