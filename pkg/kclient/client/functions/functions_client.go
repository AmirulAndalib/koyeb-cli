// Code generated by go-swagger; DO NOT EDIT.

package functions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new functions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for functions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	FunctionsFetchFunctionHistory(params *FunctionsFetchFunctionHistoryParams, authInfo runtime.ClientAuthInfoWriter) (*FunctionsFetchFunctionHistoryOK, error)

	FunctionsGetFunction(params *FunctionsGetFunctionParams, authInfo runtime.ClientAuthInfoWriter) (*FunctionsGetFunctionOK, error)

	FunctionsInvokeFunction(params *FunctionsInvokeFunctionParams, authInfo runtime.ClientAuthInfoWriter) (*FunctionsInvokeFunctionOK, error)

	FunctionsListFunctions(params *FunctionsListFunctionsParams, authInfo runtime.ClientAuthInfoWriter) (*FunctionsListFunctionsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  FunctionsFetchFunctionHistory gets the history of function runs
*/
func (a *Client) FunctionsFetchFunctionHistory(params *FunctionsFetchFunctionHistoryParams, authInfo runtime.ClientAuthInfoWriter) (*FunctionsFetchFunctionHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFunctionsFetchFunctionHistoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Functions_FetchFunctionHistory",
		Method:             "GET",
		PathPattern:        "/v1/stacks/{stack_id}/revisions/{sha}/functions/{function}/history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FunctionsFetchFunctionHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FunctionsFetchFunctionHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FunctionsFetchFunctionHistoryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  FunctionsGetFunction gets function
*/
func (a *Client) FunctionsGetFunction(params *FunctionsGetFunctionParams, authInfo runtime.ClientAuthInfoWriter) (*FunctionsGetFunctionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFunctionsGetFunctionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Functions_GetFunction",
		Method:             "GET",
		PathPattern:        "/v1/stacks/{stack_id}/revisions/{sha}/functions/{function}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FunctionsGetFunctionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FunctionsGetFunctionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FunctionsGetFunctionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  FunctionsInvokeFunction sends an event to a specific function
*/
func (a *Client) FunctionsInvokeFunction(params *FunctionsInvokeFunctionParams, authInfo runtime.ClientAuthInfoWriter) (*FunctionsInvokeFunctionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFunctionsInvokeFunctionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Functions_InvokeFunction",
		Method:             "POST",
		PathPattern:        "/v1/stacks/{stack_id}/revisions/{sha}/functions/{function}/invoke",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FunctionsInvokeFunctionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FunctionsInvokeFunctionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FunctionsInvokeFunctionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  FunctionsListFunctions lists functions for a revision
*/
func (a *Client) FunctionsListFunctions(params *FunctionsListFunctionsParams, authInfo runtime.ClientAuthInfoWriter) (*FunctionsListFunctionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFunctionsListFunctionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Functions_ListFunctions",
		Method:             "GET",
		PathPattern:        "/v1/stacks/{stack_id}/revisions/{sha}/functions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FunctionsListFunctionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FunctionsListFunctionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FunctionsListFunctionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
