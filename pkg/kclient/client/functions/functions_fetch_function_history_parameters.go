// Code generated by go-swagger; DO NOT EDIT.

package functions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewFunctionsFetchFunctionHistoryParams creates a new FunctionsFetchFunctionHistoryParams object
// with the default values initialized.
func NewFunctionsFetchFunctionHistoryParams() *FunctionsFetchFunctionHistoryParams {
	var ()
	return &FunctionsFetchFunctionHistoryParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewFunctionsFetchFunctionHistoryParamsWithTimeout creates a new FunctionsFetchFunctionHistoryParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewFunctionsFetchFunctionHistoryParamsWithTimeout(timeout time.Duration) *FunctionsFetchFunctionHistoryParams {
	var ()
	return &FunctionsFetchFunctionHistoryParams{

		timeout: timeout,
	}
}

// NewFunctionsFetchFunctionHistoryParamsWithContext creates a new FunctionsFetchFunctionHistoryParams object
// with the default values initialized, and the ability to set a context for a request
func NewFunctionsFetchFunctionHistoryParamsWithContext(ctx context.Context) *FunctionsFetchFunctionHistoryParams {
	var ()
	return &FunctionsFetchFunctionHistoryParams{

		Context: ctx,
	}
}

// NewFunctionsFetchFunctionHistoryParamsWithHTTPClient creates a new FunctionsFetchFunctionHistoryParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewFunctionsFetchFunctionHistoryParamsWithHTTPClient(client *http.Client) *FunctionsFetchFunctionHistoryParams {
	var ()
	return &FunctionsFetchFunctionHistoryParams{
		HTTPClient: client,
	}
}

/*FunctionsFetchFunctionHistoryParams contains all the parameters to send to the API endpoint
for the functions fetch function history operation typically these are written to a http.Request
*/
type FunctionsFetchFunctionHistoryParams struct {

	/*Function*/
	Function string
	/*Limit*/
	Limit *string
	/*Offset*/
	Offset *string
	/*Sha*/
	Sha string
	/*StackID*/
	StackID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the functions fetch function history params
func (o *FunctionsFetchFunctionHistoryParams) WithTimeout(timeout time.Duration) *FunctionsFetchFunctionHistoryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the functions fetch function history params
func (o *FunctionsFetchFunctionHistoryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the functions fetch function history params
func (o *FunctionsFetchFunctionHistoryParams) WithContext(ctx context.Context) *FunctionsFetchFunctionHistoryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the functions fetch function history params
func (o *FunctionsFetchFunctionHistoryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the functions fetch function history params
func (o *FunctionsFetchFunctionHistoryParams) WithHTTPClient(client *http.Client) *FunctionsFetchFunctionHistoryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the functions fetch function history params
func (o *FunctionsFetchFunctionHistoryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFunction adds the function to the functions fetch function history params
func (o *FunctionsFetchFunctionHistoryParams) WithFunction(function string) *FunctionsFetchFunctionHistoryParams {
	o.SetFunction(function)
	return o
}

// SetFunction adds the function to the functions fetch function history params
func (o *FunctionsFetchFunctionHistoryParams) SetFunction(function string) {
	o.Function = function
}

// WithLimit adds the limit to the functions fetch function history params
func (o *FunctionsFetchFunctionHistoryParams) WithLimit(limit *string) *FunctionsFetchFunctionHistoryParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the functions fetch function history params
func (o *FunctionsFetchFunctionHistoryParams) SetLimit(limit *string) {
	o.Limit = limit
}

// WithOffset adds the offset to the functions fetch function history params
func (o *FunctionsFetchFunctionHistoryParams) WithOffset(offset *string) *FunctionsFetchFunctionHistoryParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the functions fetch function history params
func (o *FunctionsFetchFunctionHistoryParams) SetOffset(offset *string) {
	o.Offset = offset
}

// WithSha adds the sha to the functions fetch function history params
func (o *FunctionsFetchFunctionHistoryParams) WithSha(sha string) *FunctionsFetchFunctionHistoryParams {
	o.SetSha(sha)
	return o
}

// SetSha adds the sha to the functions fetch function history params
func (o *FunctionsFetchFunctionHistoryParams) SetSha(sha string) {
	o.Sha = sha
}

// WithStackID adds the stackID to the functions fetch function history params
func (o *FunctionsFetchFunctionHistoryParams) WithStackID(stackID string) *FunctionsFetchFunctionHistoryParams {
	o.SetStackID(stackID)
	return o
}

// SetStackID adds the stackId to the functions fetch function history params
func (o *FunctionsFetchFunctionHistoryParams) SetStackID(stackID string) {
	o.StackID = stackID
}

// WriteToRequest writes these params to a swagger request
func (o *FunctionsFetchFunctionHistoryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param function
	if err := r.SetPathParam("function", o.Function); err != nil {
		return err
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit string
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := qrLimit
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset string
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := qrOffset
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	// path param sha
	if err := r.SetPathParam("sha", o.Sha); err != nil {
		return err
	}

	// path param stack_id
	if err := r.SetPathParam("stack_id", o.StackID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
