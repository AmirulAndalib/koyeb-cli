// Code generated by go-swagger; DO NOT EDIT.

package session

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new session API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for session API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	SessionLogin(params *SessionLoginParams, authInfo runtime.ClientAuthInfoWriter) (*SessionLoginOK, error)

	SessionLogout(params *SessionLogoutParams, authInfo runtime.ClientAuthInfoWriter) (*SessionLogoutOK, error)

	SessionPasswordlessLogin(params *SessionPasswordlessLoginParams, authInfo runtime.ClientAuthInfoWriter) (*SessionPasswordlessLoginOK, error)

	SessionRefreshToken(params *SessionRefreshTokenParams, authInfo runtime.ClientAuthInfoWriter) (*SessionRefreshTokenOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  SessionLogin logins user
*/
func (a *Client) SessionLogin(params *SessionLoginParams, authInfo runtime.ClientAuthInfoWriter) (*SessionLoginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSessionLoginParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "session_Login",
		Method:             "POST",
		PathPattern:        "/v1/account/login",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SessionLoginReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SessionLoginOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SessionLoginDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SessionLogout logouts user
*/
func (a *Client) SessionLogout(params *SessionLogoutParams, authInfo runtime.ClientAuthInfoWriter) (*SessionLogoutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSessionLogoutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "session_Logout",
		Method:             "DELETE",
		PathPattern:        "/v1/account/logout",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SessionLogoutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SessionLogoutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SessionLogoutDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SessionPasswordlessLogin session passwordless login API
*/
func (a *Client) SessionPasswordlessLogin(params *SessionPasswordlessLoginParams, authInfo runtime.ClientAuthInfoWriter) (*SessionPasswordlessLoginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSessionPasswordlessLoginParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "session_PasswordlessLogin",
		Method:             "POST",
		PathPattern:        "/v1/account/passwordless_login",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SessionPasswordlessLoginReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SessionPasswordlessLoginOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SessionPasswordlessLoginDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SessionRefreshToken refreshes token
*/
func (a *Client) SessionRefreshToken(params *SessionRefreshTokenParams, authInfo runtime.ClientAuthInfoWriter) (*SessionRefreshTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSessionRefreshTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "session_RefreshToken",
		Method:             "PUT",
		PathPattern:        "/v1/account/refresh",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SessionRefreshTokenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SessionRefreshTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SessionRefreshTokenDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
