// Code generated by go-swagger; DO NOT EDIT.

package profile

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new profile API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for profile API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	ProfileDeleteAccount(params *ProfileDeleteAccountParams, authInfo runtime.ClientAuthInfoWriter) (*ProfileDeleteAccountOK, error)

	ProfileGetCurrentUser(params *ProfileGetCurrentUserParams, authInfo runtime.ClientAuthInfoWriter) (*ProfileGetCurrentUserOK, error)

	ProfileGetOAuthOptions(params *ProfileGetOAuthOptionsParams, authInfo runtime.ClientAuthInfoWriter) (*ProfileGetOAuthOptionsOK, error)

	ProfileOAuthCallback(params *ProfileOAuthCallbackParams, authInfo runtime.ClientAuthInfoWriter) (*ProfileOAuthCallbackOK, error)

	ProfileResendEmailValidation(params *ProfileResendEmailValidationParams, authInfo runtime.ClientAuthInfoWriter) (*ProfileResendEmailValidationOK, error)

	ProfileResetPassword(params *ProfileResetPasswordParams, authInfo runtime.ClientAuthInfoWriter) (*ProfileResetPasswordOK, error)

	ProfileSignup(params *ProfileSignupParams, authInfo runtime.ClientAuthInfoWriter) (*ProfileSignupOK, error)

	ProfileUpdatePassword(params *ProfileUpdatePasswordParams, authInfo runtime.ClientAuthInfoWriter) (*ProfileUpdatePasswordOK, error)

	ProfileUpdateUser(params *ProfileUpdateUserParams, authInfo runtime.ClientAuthInfoWriter) (*ProfileUpdateUserOK, error)

	ProfileUpdateUser2(params *ProfileUpdateUser2Params, authInfo runtime.ClientAuthInfoWriter) (*ProfileUpdateUser2OK, error)

	ProfileValidate(params *ProfileValidateParams, authInfo runtime.ClientAuthInfoWriter) (*ProfileValidateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ProfileDeleteAccount profile delete account API
*/
func (a *Client) ProfileDeleteAccount(params *ProfileDeleteAccountParams, authInfo runtime.ClientAuthInfoWriter) (*ProfileDeleteAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProfileDeleteAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "profile_DeleteAccount",
		Method:             "DELETE",
		PathPattern:        "/v1/account/profile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProfileDeleteAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProfileDeleteAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProfileDeleteAccountDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ProfileGetCurrentUser profile get current user API
*/
func (a *Client) ProfileGetCurrentUser(params *ProfileGetCurrentUserParams, authInfo runtime.ClientAuthInfoWriter) (*ProfileGetCurrentUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProfileGetCurrentUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "profile_GetCurrentUser",
		Method:             "GET",
		PathPattern:        "/v1/account/profile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProfileGetCurrentUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProfileGetCurrentUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProfileGetCurrentUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ProfileGetOAuthOptions gets o auth providers
*/
func (a *Client) ProfileGetOAuthOptions(params *ProfileGetOAuthOptionsParams, authInfo runtime.ClientAuthInfoWriter) (*ProfileGetOAuthOptionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProfileGetOAuthOptionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "profile_GetOAuthOptions",
		Method:             "GET",
		PathPattern:        "/v1/account/oauth",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProfileGetOAuthOptionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProfileGetOAuthOptionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProfileGetOAuthOptionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ProfileOAuthCallback authenticates using o auth
*/
func (a *Client) ProfileOAuthCallback(params *ProfileOAuthCallbackParams, authInfo runtime.ClientAuthInfoWriter) (*ProfileOAuthCallbackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProfileOAuthCallbackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "profile_OAuthCallback",
		Method:             "POST",
		PathPattern:        "/v1/account/oauth",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProfileOAuthCallbackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProfileOAuthCallbackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProfileOAuthCallbackDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ProfileResendEmailValidation profile resend email validation API
*/
func (a *Client) ProfileResendEmailValidation(params *ProfileResendEmailValidationParams, authInfo runtime.ClientAuthInfoWriter) (*ProfileResendEmailValidationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProfileResendEmailValidationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "profile_ResendEmailValidation",
		Method:             "POST",
		PathPattern:        "/v1/account/resend_validation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProfileResendEmailValidationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProfileResendEmailValidationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProfileResendEmailValidationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ProfileResetPassword profile reset password API
*/
func (a *Client) ProfileResetPassword(params *ProfileResetPasswordParams, authInfo runtime.ClientAuthInfoWriter) (*ProfileResetPasswordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProfileResetPasswordParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "profile_ResetPassword",
		Method:             "POST",
		PathPattern:        "/v1/account/reset_password",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProfileResetPasswordReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProfileResetPasswordOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProfileResetPasswordDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ProfileSignup profile signup API
*/
func (a *Client) ProfileSignup(params *ProfileSignupParams, authInfo runtime.ClientAuthInfoWriter) (*ProfileSignupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProfileSignupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "profile_Signup",
		Method:             "POST",
		PathPattern:        "/v1/account/signup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProfileSignupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProfileSignupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProfileSignupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ProfileUpdatePassword profile update password API
*/
func (a *Client) ProfileUpdatePassword(params *ProfileUpdatePasswordParams, authInfo runtime.ClientAuthInfoWriter) (*ProfileUpdatePasswordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProfileUpdatePasswordParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "profile_UpdatePassword",
		Method:             "POST",
		PathPattern:        "/v1/account/update_password",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProfileUpdatePasswordReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProfileUpdatePasswordOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProfileUpdatePasswordDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ProfileUpdateUser profile update user API
*/
func (a *Client) ProfileUpdateUser(params *ProfileUpdateUserParams, authInfo runtime.ClientAuthInfoWriter) (*ProfileUpdateUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProfileUpdateUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "profile_UpdateUser",
		Method:             "PUT",
		PathPattern:        "/v1/account/profile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProfileUpdateUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProfileUpdateUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProfileUpdateUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ProfileUpdateUser2 profile update user2 API
*/
func (a *Client) ProfileUpdateUser2(params *ProfileUpdateUser2Params, authInfo runtime.ClientAuthInfoWriter) (*ProfileUpdateUser2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProfileUpdateUser2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "profile_UpdateUser2",
		Method:             "PATCH",
		PathPattern:        "/v1/account/profile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProfileUpdateUser2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProfileUpdateUser2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProfileUpdateUser2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ProfileValidate profile validate API
*/
func (a *Client) ProfileValidate(params *ProfileValidateParams, authInfo runtime.ClientAuthInfoWriter) (*ProfileValidateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProfileValidateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "profile_Validate",
		Method:             "POST",
		PathPattern:        "/v1/account/validate/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProfileValidateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProfileValidateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProfileValidateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
