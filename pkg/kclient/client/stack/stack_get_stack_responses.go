// Code generated by go-swagger; DO NOT EDIT.

package stack

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/koyeb/koyeb-cli/pkg/kclient/models"
)

// StackGetStackReader is a Reader for the StackGetStack structure.
type StackGetStackReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StackGetStackReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStackGetStackOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewStackGetStackBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewStackGetStackForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewStackGetStackNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewStackGetStackDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewStackGetStackOK creates a StackGetStackOK with default headers values
func NewStackGetStackOK() *StackGetStackOK {
	return &StackGetStackOK{}
}

/*StackGetStackOK handles this case with default header values.

A successful response.
*/
type StackGetStackOK struct {
	Payload *models.StorageGetStackReply
}

func (o *StackGetStackOK) Error() string {
	return fmt.Sprintf("[GET /v1/stacks/{id}][%d] stackGetStackOK  %+v", 200, o.Payload)
}

func (o *StackGetStackOK) GetPayload() *models.StorageGetStackReply {
	return o.Payload
}

func (o *StackGetStackOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StorageGetStackReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStackGetStackBadRequest creates a StackGetStackBadRequest with default headers values
func NewStackGetStackBadRequest() *StackGetStackBadRequest {
	return &StackGetStackBadRequest{}
}

/*StackGetStackBadRequest handles this case with default header values.

Validation error
*/
type StackGetStackBadRequest struct {
	Payload *models.CommonErrorWithFields
}

func (o *StackGetStackBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/stacks/{id}][%d] stackGetStackBadRequest  %+v", 400, o.Payload)
}

func (o *StackGetStackBadRequest) GetPayload() *models.CommonErrorWithFields {
	return o.Payload
}

func (o *StackGetStackBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonErrorWithFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStackGetStackForbidden creates a StackGetStackForbidden with default headers values
func NewStackGetStackForbidden() *StackGetStackForbidden {
	return &StackGetStackForbidden{}
}

/*StackGetStackForbidden handles this case with default header values.

Returned when the user does not have permission to access the resource.
*/
type StackGetStackForbidden struct {
	Payload *models.CommonError
}

func (o *StackGetStackForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/stacks/{id}][%d] stackGetStackForbidden  %+v", 403, o.Payload)
}

func (o *StackGetStackForbidden) GetPayload() *models.CommonError {
	return o.Payload
}

func (o *StackGetStackForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStackGetStackNotFound creates a StackGetStackNotFound with default headers values
func NewStackGetStackNotFound() *StackGetStackNotFound {
	return &StackGetStackNotFound{}
}

/*StackGetStackNotFound handles this case with default header values.

Returned when the resource does not exist.
*/
type StackGetStackNotFound struct {
	Payload *models.CommonError
}

func (o *StackGetStackNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/stacks/{id}][%d] stackGetStackNotFound  %+v", 404, o.Payload)
}

func (o *StackGetStackNotFound) GetPayload() *models.CommonError {
	return o.Payload
}

func (o *StackGetStackNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStackGetStackDefault creates a StackGetStackDefault with default headers values
func NewStackGetStackDefault(code int) *StackGetStackDefault {
	return &StackGetStackDefault{
		_statusCode: code,
	}
}

/*StackGetStackDefault handles this case with default header values.

An unexpected error response
*/
type StackGetStackDefault struct {
	_statusCode int

	Payload *models.GatewayruntimeError
}

// Code gets the status code for the stack get stack default response
func (o *StackGetStackDefault) Code() int {
	return o._statusCode
}

func (o *StackGetStackDefault) Error() string {
	return fmt.Sprintf("[GET /v1/stacks/{id}][%d] stack_GetStack default  %+v", o._statusCode, o.Payload)
}

func (o *StackGetStackDefault) GetPayload() *models.GatewayruntimeError {
	return o.Payload
}

func (o *StackGetStackDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GatewayruntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
