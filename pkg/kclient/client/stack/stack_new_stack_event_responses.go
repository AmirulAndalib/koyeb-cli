// Code generated by go-swagger; DO NOT EDIT.

package stack

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/koyeb/koyeb-cli/pkg/kclient/models"
)

// StackNewStackEventReader is a Reader for the StackNewStackEvent structure.
type StackNewStackEventReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StackNewStackEventReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStackNewStackEventOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewStackNewStackEventBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewStackNewStackEventForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewStackNewStackEventNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewStackNewStackEventDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewStackNewStackEventOK creates a StackNewStackEventOK with default headers values
func NewStackNewStackEventOK() *StackNewStackEventOK {
	return &StackNewStackEventOK{}
}

/*StackNewStackEventOK handles this case with default header values.

A successful response.
*/
type StackNewStackEventOK struct {
	Payload *models.StorageNewStackEventReply
}

func (o *StackNewStackEventOK) Error() string {
	return fmt.Sprintf("[POST /v1/stacks/{stack_id}/events][%d] stackNewStackEventOK  %+v", 200, o.Payload)
}

func (o *StackNewStackEventOK) GetPayload() *models.StorageNewStackEventReply {
	return o.Payload
}

func (o *StackNewStackEventOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StorageNewStackEventReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStackNewStackEventBadRequest creates a StackNewStackEventBadRequest with default headers values
func NewStackNewStackEventBadRequest() *StackNewStackEventBadRequest {
	return &StackNewStackEventBadRequest{}
}

/*StackNewStackEventBadRequest handles this case with default header values.

Validation error
*/
type StackNewStackEventBadRequest struct {
	Payload *models.CommonErrorWithFields
}

func (o *StackNewStackEventBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/stacks/{stack_id}/events][%d] stackNewStackEventBadRequest  %+v", 400, o.Payload)
}

func (o *StackNewStackEventBadRequest) GetPayload() *models.CommonErrorWithFields {
	return o.Payload
}

func (o *StackNewStackEventBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonErrorWithFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStackNewStackEventForbidden creates a StackNewStackEventForbidden with default headers values
func NewStackNewStackEventForbidden() *StackNewStackEventForbidden {
	return &StackNewStackEventForbidden{}
}

/*StackNewStackEventForbidden handles this case with default header values.

Returned when the user does not have permission to access the resource.
*/
type StackNewStackEventForbidden struct {
	Payload *models.CommonError
}

func (o *StackNewStackEventForbidden) Error() string {
	return fmt.Sprintf("[POST /v1/stacks/{stack_id}/events][%d] stackNewStackEventForbidden  %+v", 403, o.Payload)
}

func (o *StackNewStackEventForbidden) GetPayload() *models.CommonError {
	return o.Payload
}

func (o *StackNewStackEventForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStackNewStackEventNotFound creates a StackNewStackEventNotFound with default headers values
func NewStackNewStackEventNotFound() *StackNewStackEventNotFound {
	return &StackNewStackEventNotFound{}
}

/*StackNewStackEventNotFound handles this case with default header values.

Returned when the resource does not exist.
*/
type StackNewStackEventNotFound struct {
	Payload *models.CommonError
}

func (o *StackNewStackEventNotFound) Error() string {
	return fmt.Sprintf("[POST /v1/stacks/{stack_id}/events][%d] stackNewStackEventNotFound  %+v", 404, o.Payload)
}

func (o *StackNewStackEventNotFound) GetPayload() *models.CommonError {
	return o.Payload
}

func (o *StackNewStackEventNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStackNewStackEventDefault creates a StackNewStackEventDefault with default headers values
func NewStackNewStackEventDefault(code int) *StackNewStackEventDefault {
	return &StackNewStackEventDefault{
		_statusCode: code,
	}
}

/*StackNewStackEventDefault handles this case with default header values.

An unexpected error response
*/
type StackNewStackEventDefault struct {
	_statusCode int

	Payload *models.GatewayruntimeError
}

// Code gets the status code for the stack new stack event default response
func (o *StackNewStackEventDefault) Code() int {
	return o._statusCode
}

func (o *StackNewStackEventDefault) Error() string {
	return fmt.Sprintf("[POST /v1/stacks/{stack_id}/events][%d] stack_NewStackEvent default  %+v", o._statusCode, o.Payload)
}

func (o *StackNewStackEventDefault) GetPayload() *models.GatewayruntimeError {
	return o.Payload
}

func (o *StackNewStackEventDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GatewayruntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
