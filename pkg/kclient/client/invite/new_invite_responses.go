// Code generated by go-swagger; DO NOT EDIT.

package invite

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/koyeb/koyeb-cli/pkg/kclient/models"
)

// NewInviteReader is a Reader for the NewInvite structure.
type NewInviteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *NewInviteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewNewInviteOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewNewInviteBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewNewInviteForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewNewInviteNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewNewInviteOK creates a NewInviteOK with default headers values
func NewNewInviteOK() *NewInviteOK {
	return &NewInviteOK{}
}

/*NewInviteOK handles this case with default header values.

A successful response.
*/
type NewInviteOK struct {
	Payload models.CommonEmpty
}

func (o *NewInviteOK) Error() string {
	return fmt.Sprintf("[POST /v1/account/invite][%d] newInviteOK  %+v", 200, o.Payload)
}

func (o *NewInviteOK) GetPayload() models.CommonEmpty {
	return o.Payload
}

func (o *NewInviteOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNewInviteBadRequest creates a NewInviteBadRequest with default headers values
func NewNewInviteBadRequest() *NewInviteBadRequest {
	return &NewInviteBadRequest{}
}

/*NewInviteBadRequest handles this case with default header values.

Validation error
*/
type NewInviteBadRequest struct {
	Payload *models.CommonErrorWithFields
}

func (o *NewInviteBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/account/invite][%d] newInviteBadRequest  %+v", 400, o.Payload)
}

func (o *NewInviteBadRequest) GetPayload() *models.CommonErrorWithFields {
	return o.Payload
}

func (o *NewInviteBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonErrorWithFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNewInviteForbidden creates a NewInviteForbidden with default headers values
func NewNewInviteForbidden() *NewInviteForbidden {
	return &NewInviteForbidden{}
}

/*NewInviteForbidden handles this case with default header values.

Returned when the user does not have permission to access the resource.
*/
type NewInviteForbidden struct {
	Payload *models.CommonError
}

func (o *NewInviteForbidden) Error() string {
	return fmt.Sprintf("[POST /v1/account/invite][%d] newInviteForbidden  %+v", 403, o.Payload)
}

func (o *NewInviteForbidden) GetPayload() *models.CommonError {
	return o.Payload
}

func (o *NewInviteForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNewInviteNotFound creates a NewInviteNotFound with default headers values
func NewNewInviteNotFound() *NewInviteNotFound {
	return &NewInviteNotFound{}
}

/*NewInviteNotFound handles this case with default header values.

Returned when the resource does not exist.
*/
type NewInviteNotFound struct {
	Payload *models.CommonError
}

func (o *NewInviteNotFound) Error() string {
	return fmt.Sprintf("[POST /v1/account/invite][%d] newInviteNotFound  %+v", 404, o.Payload)
}

func (o *NewInviteNotFound) GetPayload() *models.CommonError {
	return o.Payload
}

func (o *NewInviteNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
