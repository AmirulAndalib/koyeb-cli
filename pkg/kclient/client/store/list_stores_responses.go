// Code generated by go-swagger; DO NOT EDIT.

package store

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/koyeb/koyeb-cli/pkg/kclient/models"
)

// ListStoresReader is a Reader for the ListStores structure.
type ListStoresReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListStoresReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListStoresOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListStoresBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListStoresForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListStoresNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListStoresOK creates a ListStoresOK with default headers values
func NewListStoresOK() *ListStoresOK {
	return &ListStoresOK{}
}

/*ListStoresOK handles this case with default header values.

A successful response.
*/
type ListStoresOK struct {
	Payload *models.StorageListStoresReply
}

func (o *ListStoresOK) Error() string {
	return fmt.Sprintf("[GET /v1/stores][%d] listStoresOK  %+v", 200, o.Payload)
}

func (o *ListStoresOK) GetPayload() *models.StorageListStoresReply {
	return o.Payload
}

func (o *ListStoresOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StorageListStoresReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListStoresBadRequest creates a ListStoresBadRequest with default headers values
func NewListStoresBadRequest() *ListStoresBadRequest {
	return &ListStoresBadRequest{}
}

/*ListStoresBadRequest handles this case with default header values.

Validation error
*/
type ListStoresBadRequest struct {
	Payload *models.CommonErrorWithFields
}

func (o *ListStoresBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/stores][%d] listStoresBadRequest  %+v", 400, o.Payload)
}

func (o *ListStoresBadRequest) GetPayload() *models.CommonErrorWithFields {
	return o.Payload
}

func (o *ListStoresBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonErrorWithFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListStoresForbidden creates a ListStoresForbidden with default headers values
func NewListStoresForbidden() *ListStoresForbidden {
	return &ListStoresForbidden{}
}

/*ListStoresForbidden handles this case with default header values.

Returned when the user does not have permission to access the resource.
*/
type ListStoresForbidden struct {
	Payload *models.CommonError
}

func (o *ListStoresForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/stores][%d] listStoresForbidden  %+v", 403, o.Payload)
}

func (o *ListStoresForbidden) GetPayload() *models.CommonError {
	return o.Payload
}

func (o *ListStoresForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListStoresNotFound creates a ListStoresNotFound with default headers values
func NewListStoresNotFound() *ListStoresNotFound {
	return &ListStoresNotFound{}
}

/*ListStoresNotFound handles this case with default header values.

Returned when the resource does not exist.
*/
type ListStoresNotFound struct {
	Payload *models.CommonError
}

func (o *ListStoresNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/stores][%d] listStoresNotFound  %+v", 404, o.Payload)
}

func (o *ListStoresNotFound) GetPayload() *models.CommonError {
	return o.Payload
}

func (o *ListStoresNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
