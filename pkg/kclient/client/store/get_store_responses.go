// Code generated by go-swagger; DO NOT EDIT.

package store

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/koyeb/koyeb-cli/pkg/kclient/models"
)

// GetStoreReader is a Reader for the GetStore structure.
type GetStoreReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetStoreReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetStoreOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetStoreBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetStoreForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetStoreNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetStoreOK creates a GetStoreOK with default headers values
func NewGetStoreOK() *GetStoreOK {
	return &GetStoreOK{}
}

/*GetStoreOK handles this case with default header values.

A successful response.
*/
type GetStoreOK struct {
	Payload *models.StorageStoreReply
}

func (o *GetStoreOK) Error() string {
	return fmt.Sprintf("[GET /v1/stores/{id}][%d] getStoreOK  %+v", 200, o.Payload)
}

func (o *GetStoreOK) GetPayload() *models.StorageStoreReply {
	return o.Payload
}

func (o *GetStoreOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StorageStoreReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetStoreBadRequest creates a GetStoreBadRequest with default headers values
func NewGetStoreBadRequest() *GetStoreBadRequest {
	return &GetStoreBadRequest{}
}

/*GetStoreBadRequest handles this case with default header values.

Validation error
*/
type GetStoreBadRequest struct {
	Payload *models.CommonErrorWithFields
}

func (o *GetStoreBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/stores/{id}][%d] getStoreBadRequest  %+v", 400, o.Payload)
}

func (o *GetStoreBadRequest) GetPayload() *models.CommonErrorWithFields {
	return o.Payload
}

func (o *GetStoreBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonErrorWithFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetStoreForbidden creates a GetStoreForbidden with default headers values
func NewGetStoreForbidden() *GetStoreForbidden {
	return &GetStoreForbidden{}
}

/*GetStoreForbidden handles this case with default header values.

Returned when the user does not have permission to access the resource.
*/
type GetStoreForbidden struct {
	Payload *models.CommonError
}

func (o *GetStoreForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/stores/{id}][%d] getStoreForbidden  %+v", 403, o.Payload)
}

func (o *GetStoreForbidden) GetPayload() *models.CommonError {
	return o.Payload
}

func (o *GetStoreForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetStoreNotFound creates a GetStoreNotFound with default headers values
func NewGetStoreNotFound() *GetStoreNotFound {
	return &GetStoreNotFound{}
}

/*GetStoreNotFound handles this case with default header values.

Returned when the resource does not exist.
*/
type GetStoreNotFound struct {
	Payload *models.CommonError
}

func (o *GetStoreNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/stores/{id}][%d] getStoreNotFound  %+v", 404, o.Payload)
}

func (o *GetStoreNotFound) GetPayload() *models.CommonError {
	return o.Payload
}

func (o *GetStoreNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
