// Code generated by go-swagger; DO NOT EDIT.

package store

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/koyeb/koyeb-cli/pkg/kclient/models"
)

// NewStoreReader is a Reader for the NewStore structure.
type NewStoreReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *NewStoreReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewNewStoreOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewNewStoreBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewNewStoreForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewNewStoreNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewNewStoreOK creates a NewStoreOK with default headers values
func NewNewStoreOK() *NewStoreOK {
	return &NewStoreOK{}
}

/*NewStoreOK handles this case with default header values.

A successful response.
*/
type NewStoreOK struct {
	Payload *models.StorageStoreReply
}

func (o *NewStoreOK) Error() string {
	return fmt.Sprintf("[POST /v1/stores][%d] newStoreOK  %+v", 200, o.Payload)
}

func (o *NewStoreOK) GetPayload() *models.StorageStoreReply {
	return o.Payload
}

func (o *NewStoreOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StorageStoreReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNewStoreBadRequest creates a NewStoreBadRequest with default headers values
func NewNewStoreBadRequest() *NewStoreBadRequest {
	return &NewStoreBadRequest{}
}

/*NewStoreBadRequest handles this case with default header values.

Validation error
*/
type NewStoreBadRequest struct {
	Payload *models.CommonErrorWithFields
}

func (o *NewStoreBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/stores][%d] newStoreBadRequest  %+v", 400, o.Payload)
}

func (o *NewStoreBadRequest) GetPayload() *models.CommonErrorWithFields {
	return o.Payload
}

func (o *NewStoreBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonErrorWithFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNewStoreForbidden creates a NewStoreForbidden with default headers values
func NewNewStoreForbidden() *NewStoreForbidden {
	return &NewStoreForbidden{}
}

/*NewStoreForbidden handles this case with default header values.

Returned when the user does not have permission to access the resource.
*/
type NewStoreForbidden struct {
	Payload *models.CommonError
}

func (o *NewStoreForbidden) Error() string {
	return fmt.Sprintf("[POST /v1/stores][%d] newStoreForbidden  %+v", 403, o.Payload)
}

func (o *NewStoreForbidden) GetPayload() *models.CommonError {
	return o.Payload
}

func (o *NewStoreForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNewStoreNotFound creates a NewStoreNotFound with default headers values
func NewNewStoreNotFound() *NewStoreNotFound {
	return &NewStoreNotFound{}
}

/*NewStoreNotFound handles this case with default header values.

Returned when the resource does not exist.
*/
type NewStoreNotFound struct {
	Payload *models.CommonError
}

func (o *NewStoreNotFound) Error() string {
	return fmt.Sprintf("[POST /v1/stores][%d] newStoreNotFound  %+v", 404, o.Payload)
}

func (o *NewStoreNotFound) GetPayload() *models.CommonError {
	return o.Payload
}

func (o *NewStoreNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
