// Code generated by go-swagger; DO NOT EDIT.

package store

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new store API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for store API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	StoreDeleteStore(params *StoreDeleteStoreParams, authInfo runtime.ClientAuthInfoWriter) (*StoreDeleteStoreOK, error)

	StoreGetStore(params *StoreGetStoreParams, authInfo runtime.ClientAuthInfoWriter) (*StoreGetStoreOK, error)

	StoreGetStoreActivities(params *StoreGetStoreActivitiesParams, authInfo runtime.ClientAuthInfoWriter) (*StoreGetStoreActivitiesOK, error)

	StoreListStores(params *StoreListStoresParams, authInfo runtime.ClientAuthInfoWriter) (*StoreListStoresOK, error)

	StoreNewStore(params *StoreNewStoreParams, authInfo runtime.ClientAuthInfoWriter) (*StoreNewStoreOK, error)

	StoreUpdateStore(params *StoreUpdateStoreParams, authInfo runtime.ClientAuthInfoWriter) (*StoreUpdateStoreOK, error)

	StoreUpdateStore2(params *StoreUpdateStore2Params, authInfo runtime.ClientAuthInfoWriter) (*StoreUpdateStore2OK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  StoreDeleteStore store delete store API
*/
func (a *Client) StoreDeleteStore(params *StoreDeleteStoreParams, authInfo runtime.ClientAuthInfoWriter) (*StoreDeleteStoreOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStoreDeleteStoreParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "store_DeleteStore",
		Method:             "DELETE",
		PathPattern:        "/v1/stores/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StoreDeleteStoreReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StoreDeleteStoreOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StoreDeleteStoreDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  StoreGetStore store get store API
*/
func (a *Client) StoreGetStore(params *StoreGetStoreParams, authInfo runtime.ClientAuthInfoWriter) (*StoreGetStoreOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStoreGetStoreParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "store_GetStore",
		Method:             "GET",
		PathPattern:        "/v1/stores/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StoreGetStoreReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StoreGetStoreOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StoreGetStoreDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  StoreGetStoreActivities store get store activities API
*/
func (a *Client) StoreGetStoreActivities(params *StoreGetStoreActivitiesParams, authInfo runtime.ClientAuthInfoWriter) (*StoreGetStoreActivitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStoreGetStoreActivitiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "store_GetStoreActivities",
		Method:             "GET",
		PathPattern:        "/v1/stores/{id}/activities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StoreGetStoreActivitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StoreGetStoreActivitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StoreGetStoreActivitiesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  StoreListStores store list stores API
*/
func (a *Client) StoreListStores(params *StoreListStoresParams, authInfo runtime.ClientAuthInfoWriter) (*StoreListStoresOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStoreListStoresParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "store_ListStores",
		Method:             "GET",
		PathPattern:        "/v1/stores",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StoreListStoresReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StoreListStoresOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StoreListStoresDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  StoreNewStore store new store API
*/
func (a *Client) StoreNewStore(params *StoreNewStoreParams, authInfo runtime.ClientAuthInfoWriter) (*StoreNewStoreOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStoreNewStoreParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "store_NewStore",
		Method:             "POST",
		PathPattern:        "/v1/stores",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StoreNewStoreReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StoreNewStoreOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StoreNewStoreDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  StoreUpdateStore store update store API
*/
func (a *Client) StoreUpdateStore(params *StoreUpdateStoreParams, authInfo runtime.ClientAuthInfoWriter) (*StoreUpdateStoreOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStoreUpdateStoreParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "store_UpdateStore",
		Method:             "PUT",
		PathPattern:        "/v1/stores/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StoreUpdateStoreReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StoreUpdateStoreOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StoreUpdateStoreDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  StoreUpdateStore2 store update store2 API
*/
func (a *Client) StoreUpdateStore2(params *StoreUpdateStore2Params, authInfo runtime.ClientAuthInfoWriter) (*StoreUpdateStore2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStoreUpdateStore2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "store_UpdateStore2",
		Method:             "PATCH",
		PathPattern:        "/v1/stores/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StoreUpdateStore2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StoreUpdateStore2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StoreUpdateStore2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
