// Code generated by go-swagger; DO NOT EDIT.

package store

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/koyeb/koyeb-cli/pkg/kclient/models"
)

// DeleteStoreReader is a Reader for the DeleteStore structure.
type DeleteStoreReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteStoreReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteStoreOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteStoreBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteStoreForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteStoreNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteStoreOK creates a DeleteStoreOK with default headers values
func NewDeleteStoreOK() *DeleteStoreOK {
	return &DeleteStoreOK{}
}

/*DeleteStoreOK handles this case with default header values.

A successful response.
*/
type DeleteStoreOK struct {
	Payload models.CommonEmpty
}

func (o *DeleteStoreOK) Error() string {
	return fmt.Sprintf("[DELETE /v1/stores/{id}][%d] deleteStoreOK  %+v", 200, o.Payload)
}

func (o *DeleteStoreOK) GetPayload() models.CommonEmpty {
	return o.Payload
}

func (o *DeleteStoreOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteStoreBadRequest creates a DeleteStoreBadRequest with default headers values
func NewDeleteStoreBadRequest() *DeleteStoreBadRequest {
	return &DeleteStoreBadRequest{}
}

/*DeleteStoreBadRequest handles this case with default header values.

Validation error
*/
type DeleteStoreBadRequest struct {
	Payload *models.CommonErrorWithFields
}

func (o *DeleteStoreBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /v1/stores/{id}][%d] deleteStoreBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteStoreBadRequest) GetPayload() *models.CommonErrorWithFields {
	return o.Payload
}

func (o *DeleteStoreBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonErrorWithFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteStoreForbidden creates a DeleteStoreForbidden with default headers values
func NewDeleteStoreForbidden() *DeleteStoreForbidden {
	return &DeleteStoreForbidden{}
}

/*DeleteStoreForbidden handles this case with default header values.

Returned when the user does not have permission to access the resource.
*/
type DeleteStoreForbidden struct {
	Payload *models.CommonError
}

func (o *DeleteStoreForbidden) Error() string {
	return fmt.Sprintf("[DELETE /v1/stores/{id}][%d] deleteStoreForbidden  %+v", 403, o.Payload)
}

func (o *DeleteStoreForbidden) GetPayload() *models.CommonError {
	return o.Payload
}

func (o *DeleteStoreForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteStoreNotFound creates a DeleteStoreNotFound with default headers values
func NewDeleteStoreNotFound() *DeleteStoreNotFound {
	return &DeleteStoreNotFound{}
}

/*DeleteStoreNotFound handles this case with default header values.

Returned when the resource does not exist.
*/
type DeleteStoreNotFound struct {
	Payload *models.CommonError
}

func (o *DeleteStoreNotFound) Error() string {
	return fmt.Sprintf("[DELETE /v1/stores/{id}][%d] deleteStoreNotFound  %+v", 404, o.Payload)
}

func (o *DeleteStoreNotFound) GetPayload() *models.CommonError {
	return o.Payload
}

func (o *DeleteStoreNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
