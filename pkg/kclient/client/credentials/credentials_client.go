// Code generated by go-swagger; DO NOT EDIT.

package credentials

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new credentials API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for credentials API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CredentialsDeleteCredential(params *CredentialsDeleteCredentialParams, authInfo runtime.ClientAuthInfoWriter) (*CredentialsDeleteCredentialOK, error)

	CredentialsGetCredential(params *CredentialsGetCredentialParams, authInfo runtime.ClientAuthInfoWriter) (*CredentialsGetCredentialOK, error)

	CredentialsListCredentials(params *CredentialsListCredentialsParams, authInfo runtime.ClientAuthInfoWriter) (*CredentialsListCredentialsOK, error)

	CredentialsNewCredential(params *CredentialsNewCredentialParams, authInfo runtime.ClientAuthInfoWriter) (*CredentialsNewCredentialOK, error)

	CredentialsUpdateCredential(params *CredentialsUpdateCredentialParams, authInfo runtime.ClientAuthInfoWriter) (*CredentialsUpdateCredentialOK, error)

	CredentialsUpdateCredential2(params *CredentialsUpdateCredential2Params, authInfo runtime.ClientAuthInfoWriter) (*CredentialsUpdateCredential2OK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CredentialsDeleteCredential credentials delete credential API
*/
func (a *Client) CredentialsDeleteCredential(params *CredentialsDeleteCredentialParams, authInfo runtime.ClientAuthInfoWriter) (*CredentialsDeleteCredentialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCredentialsDeleteCredentialParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "credentials_DeleteCredential",
		Method:             "DELETE",
		PathPattern:        "/v1/credentials/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CredentialsDeleteCredentialReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CredentialsDeleteCredentialOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CredentialsDeleteCredentialDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CredentialsGetCredential credentials get credential API
*/
func (a *Client) CredentialsGetCredential(params *CredentialsGetCredentialParams, authInfo runtime.ClientAuthInfoWriter) (*CredentialsGetCredentialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCredentialsGetCredentialParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "credentials_GetCredential",
		Method:             "GET",
		PathPattern:        "/v1/credentials/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CredentialsGetCredentialReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CredentialsGetCredentialOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CredentialsGetCredentialDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CredentialsListCredentials credentials list credentials API
*/
func (a *Client) CredentialsListCredentials(params *CredentialsListCredentialsParams, authInfo runtime.ClientAuthInfoWriter) (*CredentialsListCredentialsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCredentialsListCredentialsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "credentials_ListCredentials",
		Method:             "GET",
		PathPattern:        "/v1/credentials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CredentialsListCredentialsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CredentialsListCredentialsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CredentialsListCredentialsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CredentialsNewCredential credentials new credential API
*/
func (a *Client) CredentialsNewCredential(params *CredentialsNewCredentialParams, authInfo runtime.ClientAuthInfoWriter) (*CredentialsNewCredentialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCredentialsNewCredentialParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "credentials_NewCredential",
		Method:             "POST",
		PathPattern:        "/v1/credentials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CredentialsNewCredentialReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CredentialsNewCredentialOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CredentialsNewCredentialDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CredentialsUpdateCredential credentials update credential API
*/
func (a *Client) CredentialsUpdateCredential(params *CredentialsUpdateCredentialParams, authInfo runtime.ClientAuthInfoWriter) (*CredentialsUpdateCredentialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCredentialsUpdateCredentialParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "credentials_UpdateCredential",
		Method:             "PUT",
		PathPattern:        "/v1/credentials/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CredentialsUpdateCredentialReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CredentialsUpdateCredentialOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CredentialsUpdateCredentialDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CredentialsUpdateCredential2 credentials update credential2 API
*/
func (a *Client) CredentialsUpdateCredential2(params *CredentialsUpdateCredential2Params, authInfo runtime.ClientAuthInfoWriter) (*CredentialsUpdateCredential2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCredentialsUpdateCredential2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "credentials_UpdateCredential2",
		Method:             "PATCH",
		PathPattern:        "/v1/credentials/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CredentialsUpdateCredential2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CredentialsUpdateCredential2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CredentialsUpdateCredential2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
