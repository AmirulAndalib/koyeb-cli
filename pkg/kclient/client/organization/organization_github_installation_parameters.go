// Code generated by go-swagger; DO NOT EDIT.

package organization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewOrganizationGithubInstallationParams creates a new OrganizationGithubInstallationParams object
// with the default values initialized.
func NewOrganizationGithubInstallationParams() *OrganizationGithubInstallationParams {
	var ()
	return &OrganizationGithubInstallationParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewOrganizationGithubInstallationParamsWithTimeout creates a new OrganizationGithubInstallationParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewOrganizationGithubInstallationParamsWithTimeout(timeout time.Duration) *OrganizationGithubInstallationParams {
	var ()
	return &OrganizationGithubInstallationParams{

		timeout: timeout,
	}
}

// NewOrganizationGithubInstallationParamsWithContext creates a new OrganizationGithubInstallationParams object
// with the default values initialized, and the ability to set a context for a request
func NewOrganizationGithubInstallationParamsWithContext(ctx context.Context) *OrganizationGithubInstallationParams {
	var ()
	return &OrganizationGithubInstallationParams{

		Context: ctx,
	}
}

// NewOrganizationGithubInstallationParamsWithHTTPClient creates a new OrganizationGithubInstallationParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewOrganizationGithubInstallationParamsWithHTTPClient(client *http.Client) *OrganizationGithubInstallationParams {
	var ()
	return &OrganizationGithubInstallationParams{
		HTTPClient: client,
	}
}

/*OrganizationGithubInstallationParams contains all the parameters to send to the API endpoint
for the organization github installation operation typically these are written to a http.Request
*/
type OrganizationGithubInstallationParams struct {

	/*Metadata
	  A small (limited to 400 characters) string of arbitrary metadata which will be encoded in the state.

	*/
	Metadata *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the organization github installation params
func (o *OrganizationGithubInstallationParams) WithTimeout(timeout time.Duration) *OrganizationGithubInstallationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the organization github installation params
func (o *OrganizationGithubInstallationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the organization github installation params
func (o *OrganizationGithubInstallationParams) WithContext(ctx context.Context) *OrganizationGithubInstallationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the organization github installation params
func (o *OrganizationGithubInstallationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the organization github installation params
func (o *OrganizationGithubInstallationParams) WithHTTPClient(client *http.Client) *OrganizationGithubInstallationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the organization github installation params
func (o *OrganizationGithubInstallationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithMetadata adds the metadata to the organization github installation params
func (o *OrganizationGithubInstallationParams) WithMetadata(metadata *string) *OrganizationGithubInstallationParams {
	o.SetMetadata(metadata)
	return o
}

// SetMetadata adds the metadata to the organization github installation params
func (o *OrganizationGithubInstallationParams) SetMetadata(metadata *string) {
	o.Metadata = metadata
}

// WriteToRequest writes these params to a swagger request
func (o *OrganizationGithubInstallationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Metadata != nil {

		// query param metadata
		var qrMetadata string
		if o.Metadata != nil {
			qrMetadata = *o.Metadata
		}
		qMetadata := qrMetadata
		if qMetadata != "" {
			if err := r.SetQueryParam("metadata", qMetadata); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
