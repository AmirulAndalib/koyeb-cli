// Code generated by go-swagger; DO NOT EDIT.

package organization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new organization API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for organization API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	OrganizationCreateBillingInfo(params *OrganizationCreateBillingInfoParams, authInfo runtime.ClientAuthInfoWriter) (*OrganizationCreateBillingInfoOK, error)

	OrganizationGetBillingInfo(params *OrganizationGetBillingInfoParams, authInfo runtime.ClientAuthInfoWriter) (*OrganizationGetBillingInfoOK, error)

	OrganizationGithubInstallation(params *OrganizationGithubInstallationParams, authInfo runtime.ClientAuthInfoWriter) (*OrganizationGithubInstallationOK, error)

	OrganizationGithubInstallationCallback(params *OrganizationGithubInstallationCallbackParams, authInfo runtime.ClientAuthInfoWriter) (*OrganizationGithubInstallationCallbackOK, error)

	OrganizationGithubInstallationRepoList(params *OrganizationGithubInstallationRepoListParams, authInfo runtime.ClientAuthInfoWriter) (*OrganizationGithubInstallationRepoListOK, error)

	OrganizationUpdateBilling(params *OrganizationUpdateBillingParams, authInfo runtime.ClientAuthInfoWriter) (*OrganizationUpdateBillingOK, error)

	OrganizationUpdateBilling2(params *OrganizationUpdateBilling2Params, authInfo runtime.ClientAuthInfoWriter) (*OrganizationUpdateBilling2OK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  OrganizationCreateBillingInfo finishes registration
*/
func (a *Client) OrganizationCreateBillingInfo(params *OrganizationCreateBillingInfoParams, authInfo runtime.ClientAuthInfoWriter) (*OrganizationCreateBillingInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrganizationCreateBillingInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "organization_CreateBillingInfo",
		Method:             "POST",
		PathPattern:        "/v1/account/billing",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OrganizationCreateBillingInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrganizationCreateBillingInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*OrganizationCreateBillingInfoDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  OrganizationGetBillingInfo billings
*/
func (a *Client) OrganizationGetBillingInfo(params *OrganizationGetBillingInfoParams, authInfo runtime.ClientAuthInfoWriter) (*OrganizationGetBillingInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrganizationGetBillingInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "organization_GetBillingInfo",
		Method:             "GET",
		PathPattern:        "/v1/account/billing",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OrganizationGetBillingInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrganizationGetBillingInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*OrganizationGetBillingInfoDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  OrganizationGithubInstallation starts github installation
*/
func (a *Client) OrganizationGithubInstallation(params *OrganizationGithubInstallationParams, authInfo runtime.ClientAuthInfoWriter) (*OrganizationGithubInstallationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrganizationGithubInstallationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "organization_GithubInstallation",
		Method:             "GET",
		PathPattern:        "/v1/github/installation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OrganizationGithubInstallationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrganizationGithubInstallationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*OrganizationGithubInstallationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  OrganizationGithubInstallationCallback githubs callback for app installation
*/
func (a *Client) OrganizationGithubInstallationCallback(params *OrganizationGithubInstallationCallbackParams, authInfo runtime.ClientAuthInfoWriter) (*OrganizationGithubInstallationCallbackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrganizationGithubInstallationCallbackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "organization_GithubInstallationCallback",
		Method:             "POST",
		PathPattern:        "/v1/github/installation/callback",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OrganizationGithubInstallationCallbackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrganizationGithubInstallationCallbackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*OrganizationGithubInstallationCallbackDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  OrganizationGithubInstallationRepoList lists github repos of the organization
*/
func (a *Client) OrganizationGithubInstallationRepoList(params *OrganizationGithubInstallationRepoListParams, authInfo runtime.ClientAuthInfoWriter) (*OrganizationGithubInstallationRepoListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrganizationGithubInstallationRepoListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "organization_GithubInstallationRepoList",
		Method:             "GET",
		PathPattern:        "/v1/github/installation/repositories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OrganizationGithubInstallationRepoListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrganizationGithubInstallationRepoListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*OrganizationGithubInstallationRepoListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  OrganizationUpdateBilling updates billing info
*/
func (a *Client) OrganizationUpdateBilling(params *OrganizationUpdateBillingParams, authInfo runtime.ClientAuthInfoWriter) (*OrganizationUpdateBillingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrganizationUpdateBillingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "organization_UpdateBilling",
		Method:             "PUT",
		PathPattern:        "/v1/account/billing",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OrganizationUpdateBillingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrganizationUpdateBillingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*OrganizationUpdateBillingDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  OrganizationUpdateBilling2 updates billing info
*/
func (a *Client) OrganizationUpdateBilling2(params *OrganizationUpdateBilling2Params, authInfo runtime.ClientAuthInfoWriter) (*OrganizationUpdateBilling2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrganizationUpdateBilling2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "organization_UpdateBilling2",
		Method:             "PATCH",
		PathPattern:        "/v1/account/billing",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OrganizationUpdateBilling2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrganizationUpdateBilling2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*OrganizationUpdateBilling2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
