// Code generated by go-swagger; DO NOT EDIT.

package organization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/koyeb/koyeb-cli/pkg/kclient/models"
)

// OrganizationGithubInstallationCallbackReader is a Reader for the OrganizationGithubInstallationCallback structure.
type OrganizationGithubInstallationCallbackReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *OrganizationGithubInstallationCallbackReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewOrganizationGithubInstallationCallbackOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewOrganizationGithubInstallationCallbackBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewOrganizationGithubInstallationCallbackForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewOrganizationGithubInstallationCallbackNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewOrganizationGithubInstallationCallbackDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewOrganizationGithubInstallationCallbackOK creates a OrganizationGithubInstallationCallbackOK with default headers values
func NewOrganizationGithubInstallationCallbackOK() *OrganizationGithubInstallationCallbackOK {
	return &OrganizationGithubInstallationCallbackOK{}
}

/*OrganizationGithubInstallationCallbackOK handles this case with default header values.

A successful response.
*/
type OrganizationGithubInstallationCallbackOK struct {
	Payload models.AccountGithubInstallationCallbackReply
}

func (o *OrganizationGithubInstallationCallbackOK) Error() string {
	return fmt.Sprintf("[POST /v1/github/installation/callback][%d] organizationGithubInstallationCallbackOK  %+v", 200, o.Payload)
}

func (o *OrganizationGithubInstallationCallbackOK) GetPayload() models.AccountGithubInstallationCallbackReply {
	return o.Payload
}

func (o *OrganizationGithubInstallationCallbackOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOrganizationGithubInstallationCallbackBadRequest creates a OrganizationGithubInstallationCallbackBadRequest with default headers values
func NewOrganizationGithubInstallationCallbackBadRequest() *OrganizationGithubInstallationCallbackBadRequest {
	return &OrganizationGithubInstallationCallbackBadRequest{}
}

/*OrganizationGithubInstallationCallbackBadRequest handles this case with default header values.

Validation error
*/
type OrganizationGithubInstallationCallbackBadRequest struct {
	Payload *models.CommonErrorWithFields
}

func (o *OrganizationGithubInstallationCallbackBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/github/installation/callback][%d] organizationGithubInstallationCallbackBadRequest  %+v", 400, o.Payload)
}

func (o *OrganizationGithubInstallationCallbackBadRequest) GetPayload() *models.CommonErrorWithFields {
	return o.Payload
}

func (o *OrganizationGithubInstallationCallbackBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonErrorWithFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOrganizationGithubInstallationCallbackForbidden creates a OrganizationGithubInstallationCallbackForbidden with default headers values
func NewOrganizationGithubInstallationCallbackForbidden() *OrganizationGithubInstallationCallbackForbidden {
	return &OrganizationGithubInstallationCallbackForbidden{}
}

/*OrganizationGithubInstallationCallbackForbidden handles this case with default header values.

Returned when the user does not have permission to access the resource.
*/
type OrganizationGithubInstallationCallbackForbidden struct {
	Payload *models.CommonError
}

func (o *OrganizationGithubInstallationCallbackForbidden) Error() string {
	return fmt.Sprintf("[POST /v1/github/installation/callback][%d] organizationGithubInstallationCallbackForbidden  %+v", 403, o.Payload)
}

func (o *OrganizationGithubInstallationCallbackForbidden) GetPayload() *models.CommonError {
	return o.Payload
}

func (o *OrganizationGithubInstallationCallbackForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOrganizationGithubInstallationCallbackNotFound creates a OrganizationGithubInstallationCallbackNotFound with default headers values
func NewOrganizationGithubInstallationCallbackNotFound() *OrganizationGithubInstallationCallbackNotFound {
	return &OrganizationGithubInstallationCallbackNotFound{}
}

/*OrganizationGithubInstallationCallbackNotFound handles this case with default header values.

Returned when the resource does not exist.
*/
type OrganizationGithubInstallationCallbackNotFound struct {
	Payload *models.CommonError
}

func (o *OrganizationGithubInstallationCallbackNotFound) Error() string {
	return fmt.Sprintf("[POST /v1/github/installation/callback][%d] organizationGithubInstallationCallbackNotFound  %+v", 404, o.Payload)
}

func (o *OrganizationGithubInstallationCallbackNotFound) GetPayload() *models.CommonError {
	return o.Payload
}

func (o *OrganizationGithubInstallationCallbackNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOrganizationGithubInstallationCallbackDefault creates a OrganizationGithubInstallationCallbackDefault with default headers values
func NewOrganizationGithubInstallationCallbackDefault(code int) *OrganizationGithubInstallationCallbackDefault {
	return &OrganizationGithubInstallationCallbackDefault{
		_statusCode: code,
	}
}

/*OrganizationGithubInstallationCallbackDefault handles this case with default header values.

An unexpected error response
*/
type OrganizationGithubInstallationCallbackDefault struct {
	_statusCode int

	Payload *models.GatewayruntimeError
}

// Code gets the status code for the organization github installation callback default response
func (o *OrganizationGithubInstallationCallbackDefault) Code() int {
	return o._statusCode
}

func (o *OrganizationGithubInstallationCallbackDefault) Error() string {
	return fmt.Sprintf("[POST /v1/github/installation/callback][%d] organization_GithubInstallationCallback default  %+v", o._statusCode, o.Payload)
}

func (o *OrganizationGithubInstallationCallbackDefault) GetPayload() *models.GatewayruntimeError {
	return o.Payload
}

func (o *OrganizationGithubInstallationCallbackDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GatewayruntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
