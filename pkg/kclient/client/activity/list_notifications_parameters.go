// Code generated by go-swagger; DO NOT EDIT.

package activity

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewListNotificationsParams creates a new ListNotificationsParams object
// with the default values initialized.
func NewListNotificationsParams() *ListNotificationsParams {
	var ()
	return &ListNotificationsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewListNotificationsParamsWithTimeout creates a new ListNotificationsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListNotificationsParamsWithTimeout(timeout time.Duration) *ListNotificationsParams {
	var ()
	return &ListNotificationsParams{

		timeout: timeout,
	}
}

// NewListNotificationsParamsWithContext creates a new ListNotificationsParams object
// with the default values initialized, and the ability to set a context for a request
func NewListNotificationsParamsWithContext(ctx context.Context) *ListNotificationsParams {
	var ()
	return &ListNotificationsParams{

		Context: ctx,
	}
}

// NewListNotificationsParamsWithHTTPClient creates a new ListNotificationsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListNotificationsParamsWithHTTPClient(client *http.Client) *ListNotificationsParams {
	var ()
	return &ListNotificationsParams{
		HTTPClient: client,
	}
}

/*ListNotificationsParams contains all the parameters to send to the API endpoint
for the list notifications operation typically these are written to a http.Request
*/
type ListNotificationsParams struct {

	/*Limit*/
	Limit *string
	/*MarkRead*/
	MarkRead *string
	/*MarkSeen*/
	MarkSeen *string
	/*Offset*/
	Offset *string
	/*Unread*/
	Unread *string
	/*Unseen*/
	Unseen *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list notifications params
func (o *ListNotificationsParams) WithTimeout(timeout time.Duration) *ListNotificationsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list notifications params
func (o *ListNotificationsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list notifications params
func (o *ListNotificationsParams) WithContext(ctx context.Context) *ListNotificationsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list notifications params
func (o *ListNotificationsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list notifications params
func (o *ListNotificationsParams) WithHTTPClient(client *http.Client) *ListNotificationsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list notifications params
func (o *ListNotificationsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLimit adds the limit to the list notifications params
func (o *ListNotificationsParams) WithLimit(limit *string) *ListNotificationsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the list notifications params
func (o *ListNotificationsParams) SetLimit(limit *string) {
	o.Limit = limit
}

// WithMarkRead adds the markRead to the list notifications params
func (o *ListNotificationsParams) WithMarkRead(markRead *string) *ListNotificationsParams {
	o.SetMarkRead(markRead)
	return o
}

// SetMarkRead adds the markRead to the list notifications params
func (o *ListNotificationsParams) SetMarkRead(markRead *string) {
	o.MarkRead = markRead
}

// WithMarkSeen adds the markSeen to the list notifications params
func (o *ListNotificationsParams) WithMarkSeen(markSeen *string) *ListNotificationsParams {
	o.SetMarkSeen(markSeen)
	return o
}

// SetMarkSeen adds the markSeen to the list notifications params
func (o *ListNotificationsParams) SetMarkSeen(markSeen *string) {
	o.MarkSeen = markSeen
}

// WithOffset adds the offset to the list notifications params
func (o *ListNotificationsParams) WithOffset(offset *string) *ListNotificationsParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the list notifications params
func (o *ListNotificationsParams) SetOffset(offset *string) {
	o.Offset = offset
}

// WithUnread adds the unread to the list notifications params
func (o *ListNotificationsParams) WithUnread(unread *string) *ListNotificationsParams {
	o.SetUnread(unread)
	return o
}

// SetUnread adds the unread to the list notifications params
func (o *ListNotificationsParams) SetUnread(unread *string) {
	o.Unread = unread
}

// WithUnseen adds the unseen to the list notifications params
func (o *ListNotificationsParams) WithUnseen(unseen *string) *ListNotificationsParams {
	o.SetUnseen(unseen)
	return o
}

// SetUnseen adds the unseen to the list notifications params
func (o *ListNotificationsParams) SetUnseen(unseen *string) {
	o.Unseen = unseen
}

// WriteToRequest writes these params to a swagger request
func (o *ListNotificationsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Limit != nil {

		// query param limit
		var qrLimit string
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := qrLimit
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.MarkRead != nil {

		// query param mark_read
		var qrMarkRead string
		if o.MarkRead != nil {
			qrMarkRead = *o.MarkRead
		}
		qMarkRead := qrMarkRead
		if qMarkRead != "" {
			if err := r.SetQueryParam("mark_read", qMarkRead); err != nil {
				return err
			}
		}

	}

	if o.MarkSeen != nil {

		// query param mark_seen
		var qrMarkSeen string
		if o.MarkSeen != nil {
			qrMarkSeen = *o.MarkSeen
		}
		qMarkSeen := qrMarkSeen
		if qMarkSeen != "" {
			if err := r.SetQueryParam("mark_seen", qMarkSeen); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset string
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := qrOffset
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.Unread != nil {

		// query param unread
		var qrUnread string
		if o.Unread != nil {
			qrUnread = *o.Unread
		}
		qUnread := qrUnread
		if qUnread != "" {
			if err := r.SetQueryParam("unread", qUnread); err != nil {
				return err
			}
		}

	}

	if o.Unseen != nil {

		// query param unseen
		var qrUnseen string
		if o.Unseen != nil {
			qrUnseen = *o.Unseen
		}
		qUnseen := qrUnseen
		if qUnseen != "" {
			if err := r.SetQueryParam("unseen", qUnseen); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
