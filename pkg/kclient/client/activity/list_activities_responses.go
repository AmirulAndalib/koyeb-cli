// Code generated by go-swagger; DO NOT EDIT.

package activity

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/koyeb/koyeb-cli/pkg/kclient/models"
)

// ListActivitiesReader is a Reader for the ListActivities structure.
type ListActivitiesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListActivitiesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListActivitiesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListActivitiesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListActivitiesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListActivitiesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListActivitiesOK creates a ListActivitiesOK with default headers values
func NewListActivitiesOK() *ListActivitiesOK {
	return &ListActivitiesOK{}
}

/*ListActivitiesOK handles this case with default header values.

A successful response.
*/
type ListActivitiesOK struct {
	Payload *models.ActivityActivityList
}

func (o *ListActivitiesOK) Error() string {
	return fmt.Sprintf("[GET /v1/activities][%d] listActivitiesOK  %+v", 200, o.Payload)
}

func (o *ListActivitiesOK) GetPayload() *models.ActivityActivityList {
	return o.Payload
}

func (o *ListActivitiesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ActivityActivityList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListActivitiesBadRequest creates a ListActivitiesBadRequest with default headers values
func NewListActivitiesBadRequest() *ListActivitiesBadRequest {
	return &ListActivitiesBadRequest{}
}

/*ListActivitiesBadRequest handles this case with default header values.

Validation error
*/
type ListActivitiesBadRequest struct {
	Payload *models.CommonErrorWithFields
}

func (o *ListActivitiesBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/activities][%d] listActivitiesBadRequest  %+v", 400, o.Payload)
}

func (o *ListActivitiesBadRequest) GetPayload() *models.CommonErrorWithFields {
	return o.Payload
}

func (o *ListActivitiesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonErrorWithFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListActivitiesForbidden creates a ListActivitiesForbidden with default headers values
func NewListActivitiesForbidden() *ListActivitiesForbidden {
	return &ListActivitiesForbidden{}
}

/*ListActivitiesForbidden handles this case with default header values.

Returned when the user does not have permission to access the resource.
*/
type ListActivitiesForbidden struct {
	Payload *models.CommonError
}

func (o *ListActivitiesForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/activities][%d] listActivitiesForbidden  %+v", 403, o.Payload)
}

func (o *ListActivitiesForbidden) GetPayload() *models.CommonError {
	return o.Payload
}

func (o *ListActivitiesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListActivitiesNotFound creates a ListActivitiesNotFound with default headers values
func NewListActivitiesNotFound() *ListActivitiesNotFound {
	return &ListActivitiesNotFound{}
}

/*ListActivitiesNotFound handles this case with default header values.

Returned when the resource does not exist.
*/
type ListActivitiesNotFound struct {
	Payload *models.CommonError
}

func (o *ListActivitiesNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/activities][%d] listActivitiesNotFound  %+v", 404, o.Payload)
}

func (o *ListActivitiesNotFound) GetPayload() *models.CommonError {
	return o.Payload
}

func (o *ListActivitiesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
