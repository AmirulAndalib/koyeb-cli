// Code generated by go-swagger; DO NOT EDIT.

package stacks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/koyeb/koyeb-cli/pkg/kclient/models"
)

// SyncStackSourceReader is a Reader for the SyncStackSource structure.
type SyncStackSourceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SyncStackSourceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSyncStackSourceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSyncStackSourceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSyncStackSourceForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSyncStackSourceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSyncStackSourceOK creates a SyncStackSourceOK with default headers values
func NewSyncStackSourceOK() *SyncStackSourceOK {
	return &SyncStackSourceOK{}
}

/*SyncStackSourceOK handles this case with default header values.

A successful response.
*/
type SyncStackSourceOK struct {
	Payload *models.StorageStackSourceReply
}

func (o *SyncStackSourceOK) Error() string {
	return fmt.Sprintf("[POST /v1/stacks/{stack_id}/sources/{id}/sync][%d] syncStackSourceOK  %+v", 200, o.Payload)
}

func (o *SyncStackSourceOK) GetPayload() *models.StorageStackSourceReply {
	return o.Payload
}

func (o *SyncStackSourceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StorageStackSourceReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSyncStackSourceBadRequest creates a SyncStackSourceBadRequest with default headers values
func NewSyncStackSourceBadRequest() *SyncStackSourceBadRequest {
	return &SyncStackSourceBadRequest{}
}

/*SyncStackSourceBadRequest handles this case with default header values.

Validation error
*/
type SyncStackSourceBadRequest struct {
	Payload *models.CommonErrorWithFields
}

func (o *SyncStackSourceBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/stacks/{stack_id}/sources/{id}/sync][%d] syncStackSourceBadRequest  %+v", 400, o.Payload)
}

func (o *SyncStackSourceBadRequest) GetPayload() *models.CommonErrorWithFields {
	return o.Payload
}

func (o *SyncStackSourceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonErrorWithFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSyncStackSourceForbidden creates a SyncStackSourceForbidden with default headers values
func NewSyncStackSourceForbidden() *SyncStackSourceForbidden {
	return &SyncStackSourceForbidden{}
}

/*SyncStackSourceForbidden handles this case with default header values.

Returned when the user does not have permission to access the resource.
*/
type SyncStackSourceForbidden struct {
	Payload *models.CommonError
}

func (o *SyncStackSourceForbidden) Error() string {
	return fmt.Sprintf("[POST /v1/stacks/{stack_id}/sources/{id}/sync][%d] syncStackSourceForbidden  %+v", 403, o.Payload)
}

func (o *SyncStackSourceForbidden) GetPayload() *models.CommonError {
	return o.Payload
}

func (o *SyncStackSourceForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSyncStackSourceNotFound creates a SyncStackSourceNotFound with default headers values
func NewSyncStackSourceNotFound() *SyncStackSourceNotFound {
	return &SyncStackSourceNotFound{}
}

/*SyncStackSourceNotFound handles this case with default header values.

Returned when the resource does not exist.
*/
type SyncStackSourceNotFound struct {
	Payload *models.CommonError
}

func (o *SyncStackSourceNotFound) Error() string {
	return fmt.Sprintf("[POST /v1/stacks/{stack_id}/sources/{id}/sync][%d] syncStackSourceNotFound  %+v", 404, o.Payload)
}

func (o *SyncStackSourceNotFound) GetPayload() *models.CommonError {
	return o.Payload
}

func (o *SyncStackSourceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
