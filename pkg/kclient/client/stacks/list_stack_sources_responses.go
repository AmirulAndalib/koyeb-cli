// Code generated by go-swagger; DO NOT EDIT.

package stacks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/koyeb/koyeb-cli/pkg/kclient/models"
)

// ListStackSourcesReader is a Reader for the ListStackSources structure.
type ListStackSourcesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListStackSourcesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListStackSourcesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListStackSourcesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListStackSourcesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListStackSourcesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListStackSourcesOK creates a ListStackSourcesOK with default headers values
func NewListStackSourcesOK() *ListStackSourcesOK {
	return &ListStackSourcesOK{}
}

/*ListStackSourcesOK handles this case with default header values.

A successful response.
*/
type ListStackSourcesOK struct {
	Payload *models.StorageStackSourcesReply
}

func (o *ListStackSourcesOK) Error() string {
	return fmt.Sprintf("[GET /v1/stacks/{id}/sources][%d] listStackSourcesOK  %+v", 200, o.Payload)
}

func (o *ListStackSourcesOK) GetPayload() *models.StorageStackSourcesReply {
	return o.Payload
}

func (o *ListStackSourcesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StorageStackSourcesReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListStackSourcesBadRequest creates a ListStackSourcesBadRequest with default headers values
func NewListStackSourcesBadRequest() *ListStackSourcesBadRequest {
	return &ListStackSourcesBadRequest{}
}

/*ListStackSourcesBadRequest handles this case with default header values.

Validation error
*/
type ListStackSourcesBadRequest struct {
	Payload *models.CommonErrorWithFields
}

func (o *ListStackSourcesBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/stacks/{id}/sources][%d] listStackSourcesBadRequest  %+v", 400, o.Payload)
}

func (o *ListStackSourcesBadRequest) GetPayload() *models.CommonErrorWithFields {
	return o.Payload
}

func (o *ListStackSourcesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonErrorWithFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListStackSourcesForbidden creates a ListStackSourcesForbidden with default headers values
func NewListStackSourcesForbidden() *ListStackSourcesForbidden {
	return &ListStackSourcesForbidden{}
}

/*ListStackSourcesForbidden handles this case with default header values.

Returned when the user does not have permission to access the resource.
*/
type ListStackSourcesForbidden struct {
	Payload *models.CommonError
}

func (o *ListStackSourcesForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/stacks/{id}/sources][%d] listStackSourcesForbidden  %+v", 403, o.Payload)
}

func (o *ListStackSourcesForbidden) GetPayload() *models.CommonError {
	return o.Payload
}

func (o *ListStackSourcesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListStackSourcesNotFound creates a ListStackSourcesNotFound with default headers values
func NewListStackSourcesNotFound() *ListStackSourcesNotFound {
	return &ListStackSourcesNotFound{}
}

/*ListStackSourcesNotFound handles this case with default header values.

Returned when the resource does not exist.
*/
type ListStackSourcesNotFound struct {
	Payload *models.CommonError
}

func (o *ListStackSourcesNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/stacks/{id}/sources][%d] listStackSourcesNotFound  %+v", 404, o.Payload)
}

func (o *ListStackSourcesNotFound) GetPayload() *models.CommonError {
	return o.Payload
}

func (o *ListStackSourcesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
