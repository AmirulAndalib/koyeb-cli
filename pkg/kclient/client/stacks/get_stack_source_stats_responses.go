// Code generated by go-swagger; DO NOT EDIT.

package stacks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/koyeb/koyeb-cli/pkg/kclient/models"
)

// GetStackSourceStatsReader is a Reader for the GetStackSourceStats structure.
type GetStackSourceStatsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetStackSourceStatsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetStackSourceStatsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetStackSourceStatsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetStackSourceStatsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetStackSourceStatsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetStackSourceStatsOK creates a GetStackSourceStatsOK with default headers values
func NewGetStackSourceStatsOK() *GetStackSourceStatsOK {
	return &GetStackSourceStatsOK{}
}

/*GetStackSourceStatsOK handles this case with default header values.

A successful response.
*/
type GetStackSourceStatsOK struct {
	Payload models.StorageStackSourceStatsReply
}

func (o *GetStackSourceStatsOK) Error() string {
	return fmt.Sprintf("[GET /v1/stacks/{stack_id}/sources/{id}/stats][%d] getStackSourceStatsOK  %+v", 200, o.Payload)
}

func (o *GetStackSourceStatsOK) GetPayload() models.StorageStackSourceStatsReply {
	return o.Payload
}

func (o *GetStackSourceStatsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetStackSourceStatsBadRequest creates a GetStackSourceStatsBadRequest with default headers values
func NewGetStackSourceStatsBadRequest() *GetStackSourceStatsBadRequest {
	return &GetStackSourceStatsBadRequest{}
}

/*GetStackSourceStatsBadRequest handles this case with default header values.

Validation error
*/
type GetStackSourceStatsBadRequest struct {
	Payload *models.CommonErrorWithFields
}

func (o *GetStackSourceStatsBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/stacks/{stack_id}/sources/{id}/stats][%d] getStackSourceStatsBadRequest  %+v", 400, o.Payload)
}

func (o *GetStackSourceStatsBadRequest) GetPayload() *models.CommonErrorWithFields {
	return o.Payload
}

func (o *GetStackSourceStatsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonErrorWithFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetStackSourceStatsForbidden creates a GetStackSourceStatsForbidden with default headers values
func NewGetStackSourceStatsForbidden() *GetStackSourceStatsForbidden {
	return &GetStackSourceStatsForbidden{}
}

/*GetStackSourceStatsForbidden handles this case with default header values.

Returned when the user does not have permission to access the resource.
*/
type GetStackSourceStatsForbidden struct {
	Payload *models.CommonError
}

func (o *GetStackSourceStatsForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/stacks/{stack_id}/sources/{id}/stats][%d] getStackSourceStatsForbidden  %+v", 403, o.Payload)
}

func (o *GetStackSourceStatsForbidden) GetPayload() *models.CommonError {
	return o.Payload
}

func (o *GetStackSourceStatsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetStackSourceStatsNotFound creates a GetStackSourceStatsNotFound with default headers values
func NewGetStackSourceStatsNotFound() *GetStackSourceStatsNotFound {
	return &GetStackSourceStatsNotFound{}
}

/*GetStackSourceStatsNotFound handles this case with default header values.

Returned when the resource does not exist.
*/
type GetStackSourceStatsNotFound struct {
	Payload *models.CommonError
}

func (o *GetStackSourceStatsNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/stacks/{stack_id}/sources/{id}/stats][%d] getStackSourceStatsNotFound  %+v", 404, o.Payload)
}

func (o *GetStackSourceStatsNotFound) GetPayload() *models.CommonError {
	return o.Payload
}

func (o *GetStackSourceStatsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
