// Code generated by go-swagger; DO NOT EDIT.

package stacks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new stacks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for stacks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	BrowseStack(params *BrowseStackParams) (*BrowseStackOK, error)

	CancelStackObjectExecution(params *CancelStackObjectExecutionParams) (*CancelStackObjectExecutionOK, error)

	DeleteStack(params *DeleteStackParams) (*DeleteStackOK, error)

	DisableStack(params *DisableStackParams) (*DisableStackOK, error)

	DisableStackSource(params *DisableStackSourceParams) (*DisableStackSourceOK, error)

	DisableStackWorkflow(params *DisableStackWorkflowParams) (*DisableStackWorkflowOK, error)

	EnableStack(params *EnableStackParams) (*EnableStackOK, error)

	EnableStackSource(params *EnableStackSourceParams) (*EnableStackSourceOK, error)

	EnableStackWorkflow(params *EnableStackWorkflowParams) (*EnableStackWorkflowOK, error)

	GetStack(params *GetStackParams) (*GetStackOK, error)

	GetStackObjectExecution(params *GetStackObjectExecutionParams) (*GetStackObjectExecutionOK, error)

	GetStackObjectInfo(params *GetStackObjectInfoParams) (*GetStackObjectInfoOK, error)

	GetStackSource(params *GetStackSourceParams) (*GetStackSourceOK, error)

	GetStackSourceStats(params *GetStackSourceStatsParams) (*GetStackSourceStatsOK, error)

	GetStackStats(params *GetStackStatsParams) (*GetStackStatsOK, error)

	GetStackWorkflow(params *GetStackWorkflowParams) (*GetStackWorkflowOK, error)

	GetStackWorkflowStats(params *GetStackWorkflowStatsParams) (*GetStackWorkflowStatsOK, error)

	ListStackEvents(params *ListStackEventsParams) (*ListStackEventsOK, error)

	ListStackObjectExecutions(params *ListStackObjectExecutionsParams) (*ListStackObjectExecutionsOK, error)

	ListStackSources(params *ListStackSourcesParams) (*ListStackSourcesOK, error)

	ListStackWorkflows(params *ListStackWorkflowsParams) (*ListStackWorkflowsOK, error)

	ListStacks(params *ListStacksParams) (*ListStacksOK, error)

	NewStack(params *NewStackParams) (*NewStackOK, error)

	RelaunchStackObjectExecution(params *RelaunchStackObjectExecutionParams) (*RelaunchStackObjectExecutionOK, error)

	SyncStackSource(params *SyncStackSourceParams) (*SyncStackSourceOK, error)

	UpdateStack(params *UpdateStackParams) (*UpdateStackOK, error)

	UpdateStack2(params *UpdateStack2Params) (*UpdateStack2OK, error)

	ValidateStack(params *ValidateStackParams) (*ValidateStackOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  BrowseStack browse stack API
*/
func (a *Client) BrowseStack(params *BrowseStackParams) (*BrowseStackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBrowseStackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BrowseStack",
		Method:             "GET",
		PathPattern:        "/v1/stacks/{id}/browse/{path}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BrowseStackReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BrowseStackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BrowseStack: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CancelStackObjectExecution cancel stack object execution API
*/
func (a *Client) CancelStackObjectExecution(params *CancelStackObjectExecutionParams) (*CancelStackObjectExecutionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelStackObjectExecutionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CancelStackObjectExecution",
		Method:             "POST",
		PathPattern:        "/v1/stacks/{stack_id}/executions/{id}/cancel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CancelStackObjectExecutionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CancelStackObjectExecutionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CancelStackObjectExecution: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteStack delete stack API
*/
func (a *Client) DeleteStack(params *DeleteStackParams) (*DeleteStackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteStackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteStack",
		Method:             "DELETE",
		PathPattern:        "/v1/stacks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteStackReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteStackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteStack: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DisableStack disable stack API
*/
func (a *Client) DisableStack(params *DisableStackParams) (*DisableStackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDisableStackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DisableStack",
		Method:             "POST",
		PathPattern:        "/v1/stacks/{id}/disable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DisableStackReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DisableStackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DisableStack: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DisableStackSource disable stack source API
*/
func (a *Client) DisableStackSource(params *DisableStackSourceParams) (*DisableStackSourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDisableStackSourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DisableStackSource",
		Method:             "POST",
		PathPattern:        "/v1/stacks/{stack_id}/sources/{id}/disable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DisableStackSourceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DisableStackSourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DisableStackSource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DisableStackWorkflow disable stack workflow API
*/
func (a *Client) DisableStackWorkflow(params *DisableStackWorkflowParams) (*DisableStackWorkflowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDisableStackWorkflowParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DisableStackWorkflow",
		Method:             "POST",
		PathPattern:        "/v1/stacks/{stack_id}/workflows/{id}/disable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DisableStackWorkflowReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DisableStackWorkflowOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DisableStackWorkflow: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  EnableStack enable stack API
*/
func (a *Client) EnableStack(params *EnableStackParams) (*EnableStackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnableStackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EnableStack",
		Method:             "POST",
		PathPattern:        "/v1/stacks/{id}/enable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EnableStackReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EnableStackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EnableStack: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  EnableStackSource enable stack source API
*/
func (a *Client) EnableStackSource(params *EnableStackSourceParams) (*EnableStackSourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnableStackSourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EnableStackSource",
		Method:             "POST",
		PathPattern:        "/v1/stacks/{stack_id}/sources/{id}/enable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EnableStackSourceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EnableStackSourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EnableStackSource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  EnableStackWorkflow enable stack workflow API
*/
func (a *Client) EnableStackWorkflow(params *EnableStackWorkflowParams) (*EnableStackWorkflowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnableStackWorkflowParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EnableStackWorkflow",
		Method:             "POST",
		PathPattern:        "/v1/stacks/{stack_id}/workflows/{id}/enable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EnableStackWorkflowReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EnableStackWorkflowOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EnableStackWorkflow: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetStack get stack API
*/
func (a *Client) GetStack(params *GetStackParams) (*GetStackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetStack",
		Method:             "GET",
		PathPattern:        "/v1/stacks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStackReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetStack: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetStackObjectExecution get stack object execution API
*/
func (a *Client) GetStackObjectExecution(params *GetStackObjectExecutionParams) (*GetStackObjectExecutionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStackObjectExecutionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetStackObjectExecution",
		Method:             "GET",
		PathPattern:        "/v1/stacks/{stack_id}/executions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStackObjectExecutionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStackObjectExecutionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetStackObjectExecution: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetStackObjectInfo get stack object info API
*/
func (a *Client) GetStackObjectInfo(params *GetStackObjectInfoParams) (*GetStackObjectInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStackObjectInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetStackObjectInfo",
		Method:             "GET",
		PathPattern:        "/v1/stacks/{id}/info/{path}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStackObjectInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStackObjectInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetStackObjectInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetStackSource get stack source API
*/
func (a *Client) GetStackSource(params *GetStackSourceParams) (*GetStackSourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStackSourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetStackSource",
		Method:             "GET",
		PathPattern:        "/v1/stacks/{stack_id}/sources/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStackSourceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStackSourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetStackSource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetStackSourceStats get stack source stats API
*/
func (a *Client) GetStackSourceStats(params *GetStackSourceStatsParams) (*GetStackSourceStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStackSourceStatsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetStackSourceStats",
		Method:             "GET",
		PathPattern:        "/v1/stacks/{stack_id}/sources/{id}/stats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStackSourceStatsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStackSourceStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetStackSourceStats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetStackStats get stack stats API
*/
func (a *Client) GetStackStats(params *GetStackStatsParams) (*GetStackStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStackStatsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetStackStats",
		Method:             "GET",
		PathPattern:        "/v1/stacks/{id}/stats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStackStatsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStackStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetStackStats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetStackWorkflow get stack workflow API
*/
func (a *Client) GetStackWorkflow(params *GetStackWorkflowParams) (*GetStackWorkflowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStackWorkflowParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetStackWorkflow",
		Method:             "GET",
		PathPattern:        "/v1/stacks/{stack_id}/workflows/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStackWorkflowReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStackWorkflowOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetStackWorkflow: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetStackWorkflowStats get stack workflow stats API
*/
func (a *Client) GetStackWorkflowStats(params *GetStackWorkflowStatsParams) (*GetStackWorkflowStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStackWorkflowStatsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetStackWorkflowStats",
		Method:             "GET",
		PathPattern:        "/v1/stacks/{stack_id}/workflows/{id}/stats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStackWorkflowStatsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStackWorkflowStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetStackWorkflowStats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListStackEvents list stack events API
*/
func (a *Client) ListStackEvents(params *ListStackEventsParams) (*ListStackEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListStackEventsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListStackEvents",
		Method:             "GET",
		PathPattern:        "/v1/stacks/{id}/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListStackEventsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListStackEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListStackEvents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListStackObjectExecutions list stack object executions API
*/
func (a *Client) ListStackObjectExecutions(params *ListStackObjectExecutionsParams) (*ListStackObjectExecutionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListStackObjectExecutionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListStackObjectExecutions",
		Method:             "GET",
		PathPattern:        "/v1/stacks/{stack_id}/executions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListStackObjectExecutionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListStackObjectExecutionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListStackObjectExecutions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListStackSources list stack sources API
*/
func (a *Client) ListStackSources(params *ListStackSourcesParams) (*ListStackSourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListStackSourcesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListStackSources",
		Method:             "GET",
		PathPattern:        "/v1/stacks/{id}/sources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListStackSourcesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListStackSourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListStackSources: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListStackWorkflows list stack workflows API
*/
func (a *Client) ListStackWorkflows(params *ListStackWorkflowsParams) (*ListStackWorkflowsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListStackWorkflowsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListStackWorkflows",
		Method:             "GET",
		PathPattern:        "/v1/stacks/{id}/workflows",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListStackWorkflowsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListStackWorkflowsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListStackWorkflows: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListStacks list stacks API
*/
func (a *Client) ListStacks(params *ListStacksParams) (*ListStacksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListStacksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListStacks",
		Method:             "GET",
		PathPattern:        "/v1/stacks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListStacksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListStacksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListStacks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  NewStack new stack API
*/
func (a *Client) NewStack(params *NewStackParams) (*NewStackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNewStackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "NewStack",
		Method:             "POST",
		PathPattern:        "/v1/stacks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NewStackReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NewStackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for NewStack: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RelaunchStackObjectExecution relaunch stack object execution API
*/
func (a *Client) RelaunchStackObjectExecution(params *RelaunchStackObjectExecutionParams) (*RelaunchStackObjectExecutionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRelaunchStackObjectExecutionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RelaunchStackObjectExecution",
		Method:             "POST",
		PathPattern:        "/v1/stacks/{stack_id}/executions/{id}/relaunch",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RelaunchStackObjectExecutionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RelaunchStackObjectExecutionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RelaunchStackObjectExecution: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SyncStackSource sync stack source API
*/
func (a *Client) SyncStackSource(params *SyncStackSourceParams) (*SyncStackSourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSyncStackSourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SyncStackSource",
		Method:             "POST",
		PathPattern:        "/v1/stacks/{stack_id}/sources/{id}/sync",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SyncStackSourceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SyncStackSourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SyncStackSource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateStack update stack API
*/
func (a *Client) UpdateStack(params *UpdateStackParams) (*UpdateStackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateStackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateStack",
		Method:             "PUT",
		PathPattern:        "/v1/stacks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateStackReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateStackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateStack: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateStack2 update stack2 API
*/
func (a *Client) UpdateStack2(params *UpdateStack2Params) (*UpdateStack2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateStack2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateStack2",
		Method:             "PATCH",
		PathPattern:        "/v1/stacks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateStack2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateStack2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateStack2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ValidateStack validate stack API
*/
func (a *Client) ValidateStack(params *ValidateStackParams) (*ValidateStackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateStackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ValidateStack",
		Method:             "POST",
		PathPattern:        "/v1/validate/stacks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ValidateStackReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateStackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ValidateStack: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
