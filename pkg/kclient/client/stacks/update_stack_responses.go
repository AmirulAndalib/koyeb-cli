// Code generated by go-swagger; DO NOT EDIT.

package stacks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/koyeb/koyeb-cli/pkg/kclient/models"
)

// UpdateStackReader is a Reader for the UpdateStack structure.
type UpdateStackReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateStackReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateStackOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateStackBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateStackForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateStackNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateStackOK creates a UpdateStackOK with default headers values
func NewUpdateStackOK() *UpdateStackOK {
	return &UpdateStackOK{}
}

/*UpdateStackOK handles this case with default header values.

A successful response.
*/
type UpdateStackOK struct {
	Payload *models.StorageStackReply
}

func (o *UpdateStackOK) Error() string {
	return fmt.Sprintf("[PUT /v1/stacks/{id}][%d] updateStackOK  %+v", 200, o.Payload)
}

func (o *UpdateStackOK) GetPayload() *models.StorageStackReply {
	return o.Payload
}

func (o *UpdateStackOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StorageStackReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateStackBadRequest creates a UpdateStackBadRequest with default headers values
func NewUpdateStackBadRequest() *UpdateStackBadRequest {
	return &UpdateStackBadRequest{}
}

/*UpdateStackBadRequest handles this case with default header values.

Validation error
*/
type UpdateStackBadRequest struct {
	Payload *models.CommonErrorWithFields
}

func (o *UpdateStackBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/stacks/{id}][%d] updateStackBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateStackBadRequest) GetPayload() *models.CommonErrorWithFields {
	return o.Payload
}

func (o *UpdateStackBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonErrorWithFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateStackForbidden creates a UpdateStackForbidden with default headers values
func NewUpdateStackForbidden() *UpdateStackForbidden {
	return &UpdateStackForbidden{}
}

/*UpdateStackForbidden handles this case with default header values.

Returned when the user does not have permission to access the resource.
*/
type UpdateStackForbidden struct {
	Payload *models.CommonError
}

func (o *UpdateStackForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/stacks/{id}][%d] updateStackForbidden  %+v", 403, o.Payload)
}

func (o *UpdateStackForbidden) GetPayload() *models.CommonError {
	return o.Payload
}

func (o *UpdateStackForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateStackNotFound creates a UpdateStackNotFound with default headers values
func NewUpdateStackNotFound() *UpdateStackNotFound {
	return &UpdateStackNotFound{}
}

/*UpdateStackNotFound handles this case with default header values.

Returned when the resource does not exist.
*/
type UpdateStackNotFound struct {
	Payload *models.CommonError
}

func (o *UpdateStackNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/stacks/{id}][%d] updateStackNotFound  %+v", 404, o.Payload)
}

func (o *UpdateStackNotFound) GetPayload() *models.CommonError {
	return o.Payload
}

func (o *UpdateStackNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
