// Code generated by go-swagger; DO NOT EDIT.

package stacks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/koyeb/koyeb-cli/pkg/kclient/models"
)

// DisableStackSourceReader is a Reader for the DisableStackSource structure.
type DisableStackSourceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DisableStackSourceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDisableStackSourceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDisableStackSourceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDisableStackSourceForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDisableStackSourceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDisableStackSourceOK creates a DisableStackSourceOK with default headers values
func NewDisableStackSourceOK() *DisableStackSourceOK {
	return &DisableStackSourceOK{}
}

/*DisableStackSourceOK handles this case with default header values.

A successful response.
*/
type DisableStackSourceOK struct {
	Payload *models.StorageStackSourceReply
}

func (o *DisableStackSourceOK) Error() string {
	return fmt.Sprintf("[POST /v1/stacks/{stack_id}/sources/{id}/disable][%d] disableStackSourceOK  %+v", 200, o.Payload)
}

func (o *DisableStackSourceOK) GetPayload() *models.StorageStackSourceReply {
	return o.Payload
}

func (o *DisableStackSourceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StorageStackSourceReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDisableStackSourceBadRequest creates a DisableStackSourceBadRequest with default headers values
func NewDisableStackSourceBadRequest() *DisableStackSourceBadRequest {
	return &DisableStackSourceBadRequest{}
}

/*DisableStackSourceBadRequest handles this case with default header values.

Validation error
*/
type DisableStackSourceBadRequest struct {
	Payload *models.CommonErrorWithFields
}

func (o *DisableStackSourceBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/stacks/{stack_id}/sources/{id}/disable][%d] disableStackSourceBadRequest  %+v", 400, o.Payload)
}

func (o *DisableStackSourceBadRequest) GetPayload() *models.CommonErrorWithFields {
	return o.Payload
}

func (o *DisableStackSourceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonErrorWithFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDisableStackSourceForbidden creates a DisableStackSourceForbidden with default headers values
func NewDisableStackSourceForbidden() *DisableStackSourceForbidden {
	return &DisableStackSourceForbidden{}
}

/*DisableStackSourceForbidden handles this case with default header values.

Returned when the user does not have permission to access the resource.
*/
type DisableStackSourceForbidden struct {
	Payload *models.CommonError
}

func (o *DisableStackSourceForbidden) Error() string {
	return fmt.Sprintf("[POST /v1/stacks/{stack_id}/sources/{id}/disable][%d] disableStackSourceForbidden  %+v", 403, o.Payload)
}

func (o *DisableStackSourceForbidden) GetPayload() *models.CommonError {
	return o.Payload
}

func (o *DisableStackSourceForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDisableStackSourceNotFound creates a DisableStackSourceNotFound with default headers values
func NewDisableStackSourceNotFound() *DisableStackSourceNotFound {
	return &DisableStackSourceNotFound{}
}

/*DisableStackSourceNotFound handles this case with default header values.

Returned when the resource does not exist.
*/
type DisableStackSourceNotFound struct {
	Payload *models.CommonError
}

func (o *DisableStackSourceNotFound) Error() string {
	return fmt.Sprintf("[POST /v1/stacks/{stack_id}/sources/{id}/disable][%d] disableStackSourceNotFound  %+v", 404, o.Payload)
}

func (o *DisableStackSourceNotFound) GetPayload() *models.CommonError {
	return o.Payload
}

func (o *DisableStackSourceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
