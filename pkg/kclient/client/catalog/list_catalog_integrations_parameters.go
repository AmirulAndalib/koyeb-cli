// Code generated by go-swagger; DO NOT EDIT.

package catalog

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewListCatalogIntegrationsParams creates a new ListCatalogIntegrationsParams object
// with the default values initialized.
func NewListCatalogIntegrationsParams() *ListCatalogIntegrationsParams {
	var ()
	return &ListCatalogIntegrationsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewListCatalogIntegrationsParamsWithTimeout creates a new ListCatalogIntegrationsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListCatalogIntegrationsParamsWithTimeout(timeout time.Duration) *ListCatalogIntegrationsParams {
	var ()
	return &ListCatalogIntegrationsParams{

		timeout: timeout,
	}
}

// NewListCatalogIntegrationsParamsWithContext creates a new ListCatalogIntegrationsParams object
// with the default values initialized, and the ability to set a context for a request
func NewListCatalogIntegrationsParamsWithContext(ctx context.Context) *ListCatalogIntegrationsParams {
	var ()
	return &ListCatalogIntegrationsParams{

		Context: ctx,
	}
}

// NewListCatalogIntegrationsParamsWithHTTPClient creates a new ListCatalogIntegrationsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListCatalogIntegrationsParamsWithHTTPClient(client *http.Client) *ListCatalogIntegrationsParams {
	var ()
	return &ListCatalogIntegrationsParams{
		HTTPClient: client,
	}
}

/*ListCatalogIntegrationsParams contains all the parameters to send to the API endpoint
for the list catalog integrations operation typically these are written to a http.Request
*/
type ListCatalogIntegrationsParams struct {

	/*Limit*/
	Limit *string
	/*Name*/
	Name *string
	/*Offset*/
	Offset *string
	/*Tags*/
	Tags *string
	/*Type*/
	Type *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list catalog integrations params
func (o *ListCatalogIntegrationsParams) WithTimeout(timeout time.Duration) *ListCatalogIntegrationsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list catalog integrations params
func (o *ListCatalogIntegrationsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list catalog integrations params
func (o *ListCatalogIntegrationsParams) WithContext(ctx context.Context) *ListCatalogIntegrationsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list catalog integrations params
func (o *ListCatalogIntegrationsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list catalog integrations params
func (o *ListCatalogIntegrationsParams) WithHTTPClient(client *http.Client) *ListCatalogIntegrationsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list catalog integrations params
func (o *ListCatalogIntegrationsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLimit adds the limit to the list catalog integrations params
func (o *ListCatalogIntegrationsParams) WithLimit(limit *string) *ListCatalogIntegrationsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the list catalog integrations params
func (o *ListCatalogIntegrationsParams) SetLimit(limit *string) {
	o.Limit = limit
}

// WithName adds the name to the list catalog integrations params
func (o *ListCatalogIntegrationsParams) WithName(name *string) *ListCatalogIntegrationsParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the list catalog integrations params
func (o *ListCatalogIntegrationsParams) SetName(name *string) {
	o.Name = name
}

// WithOffset adds the offset to the list catalog integrations params
func (o *ListCatalogIntegrationsParams) WithOffset(offset *string) *ListCatalogIntegrationsParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the list catalog integrations params
func (o *ListCatalogIntegrationsParams) SetOffset(offset *string) {
	o.Offset = offset
}

// WithTags adds the tags to the list catalog integrations params
func (o *ListCatalogIntegrationsParams) WithTags(tags *string) *ListCatalogIntegrationsParams {
	o.SetTags(tags)
	return o
}

// SetTags adds the tags to the list catalog integrations params
func (o *ListCatalogIntegrationsParams) SetTags(tags *string) {
	o.Tags = tags
}

// WithType adds the typeVar to the list catalog integrations params
func (o *ListCatalogIntegrationsParams) WithType(typeVar *string) *ListCatalogIntegrationsParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the list catalog integrations params
func (o *ListCatalogIntegrationsParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *ListCatalogIntegrationsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Limit != nil {

		// query param limit
		var qrLimit string
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := qrLimit
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset string
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := qrOffset
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.Tags != nil {

		// query param tags
		var qrTags string
		if o.Tags != nil {
			qrTags = *o.Tags
		}
		qTags := qrTags
		if qTags != "" {
			if err := r.SetQueryParam("tags", qTags); err != nil {
				return err
			}
		}

	}

	if o.Type != nil {

		// query param type
		var qrType string
		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {
			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
