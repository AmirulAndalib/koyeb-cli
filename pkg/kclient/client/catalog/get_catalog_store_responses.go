// Code generated by go-swagger; DO NOT EDIT.

package catalog

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/koyeb/koyeb-cli/pkg/kclient/models"
)

// GetCatalogStoreReader is a Reader for the GetCatalogStore structure.
type GetCatalogStoreReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCatalogStoreReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCatalogStoreOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetCatalogStoreBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetCatalogStoreForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetCatalogStoreNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetCatalogStoreOK creates a GetCatalogStoreOK with default headers values
func NewGetCatalogStoreOK() *GetCatalogStoreOK {
	return &GetCatalogStoreOK{}
}

/*GetCatalogStoreOK handles this case with default header values.

A successful response.
*/
type GetCatalogStoreOK struct {
	Payload *models.StorageCatalogStoreReply
}

func (o *GetCatalogStoreOK) Error() string {
	return fmt.Sprintf("[GET /v1/catalog/stores/{name}][%d] getCatalogStoreOK  %+v", 200, o.Payload)
}

func (o *GetCatalogStoreOK) GetPayload() *models.StorageCatalogStoreReply {
	return o.Payload
}

func (o *GetCatalogStoreOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StorageCatalogStoreReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCatalogStoreBadRequest creates a GetCatalogStoreBadRequest with default headers values
func NewGetCatalogStoreBadRequest() *GetCatalogStoreBadRequest {
	return &GetCatalogStoreBadRequest{}
}

/*GetCatalogStoreBadRequest handles this case with default header values.

Validation error
*/
type GetCatalogStoreBadRequest struct {
	Payload *models.CommonErrorWithFields
}

func (o *GetCatalogStoreBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/catalog/stores/{name}][%d] getCatalogStoreBadRequest  %+v", 400, o.Payload)
}

func (o *GetCatalogStoreBadRequest) GetPayload() *models.CommonErrorWithFields {
	return o.Payload
}

func (o *GetCatalogStoreBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonErrorWithFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCatalogStoreForbidden creates a GetCatalogStoreForbidden with default headers values
func NewGetCatalogStoreForbidden() *GetCatalogStoreForbidden {
	return &GetCatalogStoreForbidden{}
}

/*GetCatalogStoreForbidden handles this case with default header values.

Returned when the user does not have permission to access the resource.
*/
type GetCatalogStoreForbidden struct {
	Payload *models.CommonError
}

func (o *GetCatalogStoreForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/catalog/stores/{name}][%d] getCatalogStoreForbidden  %+v", 403, o.Payload)
}

func (o *GetCatalogStoreForbidden) GetPayload() *models.CommonError {
	return o.Payload
}

func (o *GetCatalogStoreForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCatalogStoreNotFound creates a GetCatalogStoreNotFound with default headers values
func NewGetCatalogStoreNotFound() *GetCatalogStoreNotFound {
	return &GetCatalogStoreNotFound{}
}

/*GetCatalogStoreNotFound handles this case with default header values.

Returned when the resource does not exist.
*/
type GetCatalogStoreNotFound struct {
	Payload *models.CommonError
}

func (o *GetCatalogStoreNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/catalog/stores/{name}][%d] getCatalogStoreNotFound  %+v", 404, o.Payload)
}

func (o *GetCatalogStoreNotFound) GetPayload() *models.CommonError {
	return o.Payload
}

func (o *GetCatalogStoreNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
