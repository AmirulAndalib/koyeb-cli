// Code generated by go-swagger; DO NOT EDIT.

package deliveries

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new deliveries API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for deliveries API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteDelivery(params *DeleteDeliveryParams) (*DeleteDeliveryOK, error)

	GetDelivery(params *GetDeliveryParams) (*GetDeliveryOK, error)

	ListDeliveries(params *ListDeliveriesParams) (*ListDeliveriesOK, error)

	NewDelivery(params *NewDeliveryParams) (*NewDeliveryOK, error)

	UpdateDelivery(params *UpdateDeliveryParams) (*UpdateDeliveryOK, error)

	UpdateDelivery2(params *UpdateDelivery2Params) (*UpdateDelivery2OK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteDelivery delete delivery API
*/
func (a *Client) DeleteDelivery(params *DeleteDeliveryParams) (*DeleteDeliveryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDeliveryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteDelivery",
		Method:             "DELETE",
		PathPattern:        "/v1/deliveries/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDeliveryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDeliveryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteDelivery: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDelivery get delivery API
*/
func (a *Client) GetDelivery(params *GetDeliveryParams) (*GetDeliveryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeliveryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDelivery",
		Method:             "GET",
		PathPattern:        "/v1/deliveries/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDeliveryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeliveryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDelivery: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListDeliveries list deliveries API
*/
func (a *Client) ListDeliveries(params *ListDeliveriesParams) (*ListDeliveriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListDeliveriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListDeliveries",
		Method:             "GET",
		PathPattern:        "/v1/deliveries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListDeliveriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListDeliveriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListDeliveries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  NewDelivery new delivery API
*/
func (a *Client) NewDelivery(params *NewDeliveryParams) (*NewDeliveryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNewDeliveryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "NewDelivery",
		Method:             "POST",
		PathPattern:        "/v1/deliveries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NewDeliveryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NewDeliveryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for NewDelivery: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateDelivery update delivery API
*/
func (a *Client) UpdateDelivery(params *UpdateDeliveryParams) (*UpdateDeliveryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDeliveryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateDelivery",
		Method:             "PUT",
		PathPattern:        "/v1/deliveries/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateDeliveryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDeliveryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateDelivery: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateDelivery2 update delivery2 API
*/
func (a *Client) UpdateDelivery2(params *UpdateDelivery2Params) (*UpdateDelivery2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDelivery2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateDelivery2",
		Method:             "PATCH",
		PathPattern:        "/v1/deliveries/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateDelivery2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDelivery2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateDelivery2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
