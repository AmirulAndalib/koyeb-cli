// Code generated by go-swagger; DO NOT EDIT.

package s3_credentials

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new s3 credentials API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for s3 credentials API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	S3CredentialsDeleteS3Credential(params *S3CredentialsDeleteS3CredentialParams, authInfo runtime.ClientAuthInfoWriter) (*S3CredentialsDeleteS3CredentialOK, error)

	S3CredentialsGetS3Credential(params *S3CredentialsGetS3CredentialParams, authInfo runtime.ClientAuthInfoWriter) (*S3CredentialsGetS3CredentialOK, error)

	S3CredentialsListS3Credentials(params *S3CredentialsListS3CredentialsParams, authInfo runtime.ClientAuthInfoWriter) (*S3CredentialsListS3CredentialsOK, error)

	S3CredentialsNewS3Credential(params *S3CredentialsNewS3CredentialParams, authInfo runtime.ClientAuthInfoWriter) (*S3CredentialsNewS3CredentialOK, error)

	S3CredentialsUpdateS3Credential(params *S3CredentialsUpdateS3CredentialParams, authInfo runtime.ClientAuthInfoWriter) (*S3CredentialsUpdateS3CredentialOK, error)

	S3CredentialsUpdateS3Credential2(params *S3CredentialsUpdateS3Credential2Params, authInfo runtime.ClientAuthInfoWriter) (*S3CredentialsUpdateS3Credential2OK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  S3CredentialsDeleteS3Credential s3 credentials delete s3 credential API
*/
func (a *Client) S3CredentialsDeleteS3Credential(params *S3CredentialsDeleteS3CredentialParams, authInfo runtime.ClientAuthInfoWriter) (*S3CredentialsDeleteS3CredentialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewS3CredentialsDeleteS3CredentialParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "s3Credentials_DeleteS3Credential",
		Method:             "DELETE",
		PathPattern:        "/v1/s3_credentials/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &S3CredentialsDeleteS3CredentialReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*S3CredentialsDeleteS3CredentialOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*S3CredentialsDeleteS3CredentialDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  S3CredentialsGetS3Credential s3 credentials get s3 credential API
*/
func (a *Client) S3CredentialsGetS3Credential(params *S3CredentialsGetS3CredentialParams, authInfo runtime.ClientAuthInfoWriter) (*S3CredentialsGetS3CredentialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewS3CredentialsGetS3CredentialParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "s3Credentials_GetS3Credential",
		Method:             "GET",
		PathPattern:        "/v1/s3_credentials/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &S3CredentialsGetS3CredentialReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*S3CredentialsGetS3CredentialOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*S3CredentialsGetS3CredentialDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  S3CredentialsListS3Credentials s3 credentials list s3 credentials API
*/
func (a *Client) S3CredentialsListS3Credentials(params *S3CredentialsListS3CredentialsParams, authInfo runtime.ClientAuthInfoWriter) (*S3CredentialsListS3CredentialsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewS3CredentialsListS3CredentialsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "s3Credentials_ListS3Credentials",
		Method:             "GET",
		PathPattern:        "/v1/s3_credentials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &S3CredentialsListS3CredentialsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*S3CredentialsListS3CredentialsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*S3CredentialsListS3CredentialsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  S3CredentialsNewS3Credential s3 credentials new s3 credential API
*/
func (a *Client) S3CredentialsNewS3Credential(params *S3CredentialsNewS3CredentialParams, authInfo runtime.ClientAuthInfoWriter) (*S3CredentialsNewS3CredentialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewS3CredentialsNewS3CredentialParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "s3Credentials_NewS3Credential",
		Method:             "POST",
		PathPattern:        "/v1/s3_credentials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &S3CredentialsNewS3CredentialReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*S3CredentialsNewS3CredentialOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*S3CredentialsNewS3CredentialDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  S3CredentialsUpdateS3Credential s3 credentials update s3 credential API
*/
func (a *Client) S3CredentialsUpdateS3Credential(params *S3CredentialsUpdateS3CredentialParams, authInfo runtime.ClientAuthInfoWriter) (*S3CredentialsUpdateS3CredentialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewS3CredentialsUpdateS3CredentialParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "s3Credentials_UpdateS3Credential",
		Method:             "PUT",
		PathPattern:        "/v1/s3_credentials/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &S3CredentialsUpdateS3CredentialReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*S3CredentialsUpdateS3CredentialOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*S3CredentialsUpdateS3CredentialDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  S3CredentialsUpdateS3Credential2 s3 credentials update s3 credential2 API
*/
func (a *Client) S3CredentialsUpdateS3Credential2(params *S3CredentialsUpdateS3Credential2Params, authInfo runtime.ClientAuthInfoWriter) (*S3CredentialsUpdateS3Credential2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewS3CredentialsUpdateS3Credential2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "s3Credentials_UpdateS3Credential2",
		Method:             "PATCH",
		PathPattern:        "/v1/s3_credentials/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &S3CredentialsUpdateS3Credential2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*S3CredentialsUpdateS3Credential2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*S3CredentialsUpdateS3Credential2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
