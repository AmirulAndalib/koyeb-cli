// Code generated by go-swagger; DO NOT EDIT.

package stores

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/koyeb/koyeb-cli/pkg/kclient/models"
)

// UpdateStoreReader is a Reader for the UpdateStore structure.
type UpdateStoreReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateStoreReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateStoreOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateStoreBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateStoreForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateStoreNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateStoreOK creates a UpdateStoreOK with default headers values
func NewUpdateStoreOK() *UpdateStoreOK {
	return &UpdateStoreOK{}
}

/*UpdateStoreOK handles this case with default header values.

A successful response.
*/
type UpdateStoreOK struct {
	Payload *models.StorageStoreReply
}

func (o *UpdateStoreOK) Error() string {
	return fmt.Sprintf("[PUT /v1/stores/{id}][%d] updateStoreOK  %+v", 200, o.Payload)
}

func (o *UpdateStoreOK) GetPayload() *models.StorageStoreReply {
	return o.Payload
}

func (o *UpdateStoreOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StorageStoreReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateStoreBadRequest creates a UpdateStoreBadRequest with default headers values
func NewUpdateStoreBadRequest() *UpdateStoreBadRequest {
	return &UpdateStoreBadRequest{}
}

/*UpdateStoreBadRequest handles this case with default header values.

Validation error
*/
type UpdateStoreBadRequest struct {
	Payload *models.CommonErrorWithFields
}

func (o *UpdateStoreBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/stores/{id}][%d] updateStoreBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateStoreBadRequest) GetPayload() *models.CommonErrorWithFields {
	return o.Payload
}

func (o *UpdateStoreBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonErrorWithFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateStoreForbidden creates a UpdateStoreForbidden with default headers values
func NewUpdateStoreForbidden() *UpdateStoreForbidden {
	return &UpdateStoreForbidden{}
}

/*UpdateStoreForbidden handles this case with default header values.

Returned when the user does not have permission to access the resource.
*/
type UpdateStoreForbidden struct {
	Payload *models.CommonError
}

func (o *UpdateStoreForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/stores/{id}][%d] updateStoreForbidden  %+v", 403, o.Payload)
}

func (o *UpdateStoreForbidden) GetPayload() *models.CommonError {
	return o.Payload
}

func (o *UpdateStoreForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateStoreNotFound creates a UpdateStoreNotFound with default headers values
func NewUpdateStoreNotFound() *UpdateStoreNotFound {
	return &UpdateStoreNotFound{}
}

/*UpdateStoreNotFound handles this case with default header values.

Returned when the resource does not exist.
*/
type UpdateStoreNotFound struct {
	Payload *models.CommonError
}

func (o *UpdateStoreNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/stores/{id}][%d] updateStoreNotFound  %+v", 404, o.Payload)
}

func (o *UpdateStoreNotFound) GetPayload() *models.CommonError {
	return o.Payload
}

func (o *UpdateStoreNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
