// Code generated by go-swagger; DO NOT EDIT.

package services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewListServicesParams creates a new ListServicesParams object
// with the default values initialized.
func NewListServicesParams() *ListServicesParams {
	var ()
	return &ListServicesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewListServicesParamsWithTimeout creates a new ListServicesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListServicesParamsWithTimeout(timeout time.Duration) *ListServicesParams {
	var ()
	return &ListServicesParams{

		timeout: timeout,
	}
}

// NewListServicesParamsWithContext creates a new ListServicesParams object
// with the default values initialized, and the ability to set a context for a request
func NewListServicesParamsWithContext(ctx context.Context) *ListServicesParams {
	var ()
	return &ListServicesParams{

		Context: ctx,
	}
}

// NewListServicesParamsWithHTTPClient creates a new ListServicesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListServicesParamsWithHTTPClient(client *http.Client) *ListServicesParams {
	var ()
	return &ListServicesParams{
		HTTPClient: client,
	}
}

/*ListServicesParams contains all the parameters to send to the API endpoint
for the list services operation typically these are written to a http.Request
*/
type ListServicesParams struct {

	/*Limit*/
	Limit *string
	/*Name*/
	Name *string
	/*Offset*/
	Offset *string
	/*Service*/
	Service *string
	/*Status*/
	Status *string
	/*Tags*/
	Tags *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list services params
func (o *ListServicesParams) WithTimeout(timeout time.Duration) *ListServicesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list services params
func (o *ListServicesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list services params
func (o *ListServicesParams) WithContext(ctx context.Context) *ListServicesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list services params
func (o *ListServicesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list services params
func (o *ListServicesParams) WithHTTPClient(client *http.Client) *ListServicesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list services params
func (o *ListServicesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLimit adds the limit to the list services params
func (o *ListServicesParams) WithLimit(limit *string) *ListServicesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the list services params
func (o *ListServicesParams) SetLimit(limit *string) {
	o.Limit = limit
}

// WithName adds the name to the list services params
func (o *ListServicesParams) WithName(name *string) *ListServicesParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the list services params
func (o *ListServicesParams) SetName(name *string) {
	o.Name = name
}

// WithOffset adds the offset to the list services params
func (o *ListServicesParams) WithOffset(offset *string) *ListServicesParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the list services params
func (o *ListServicesParams) SetOffset(offset *string) {
	o.Offset = offset
}

// WithService adds the service to the list services params
func (o *ListServicesParams) WithService(service *string) *ListServicesParams {
	o.SetService(service)
	return o
}

// SetService adds the service to the list services params
func (o *ListServicesParams) SetService(service *string) {
	o.Service = service
}

// WithStatus adds the status to the list services params
func (o *ListServicesParams) WithStatus(status *string) *ListServicesParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the list services params
func (o *ListServicesParams) SetStatus(status *string) {
	o.Status = status
}

// WithTags adds the tags to the list services params
func (o *ListServicesParams) WithTags(tags *string) *ListServicesParams {
	o.SetTags(tags)
	return o
}

// SetTags adds the tags to the list services params
func (o *ListServicesParams) SetTags(tags *string) {
	o.Tags = tags
}

// WriteToRequest writes these params to a swagger request
func (o *ListServicesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Limit != nil {

		// query param limit
		var qrLimit string
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := qrLimit
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset string
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := qrOffset
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.Service != nil {

		// query param service
		var qrService string
		if o.Service != nil {
			qrService = *o.Service
		}
		qService := qrService
		if qService != "" {
			if err := r.SetQueryParam("service", qService); err != nil {
				return err
			}
		}

	}

	if o.Status != nil {

		// query param status
		var qrStatus string
		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {
			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}

	}

	if o.Tags != nil {

		// query param tags
		var qrTags string
		if o.Tags != nil {
			qrTags = *o.Tags
		}
		qTags := qrTags
		if qTags != "" {
			if err := r.SetQueryParam("tags", qTags); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
