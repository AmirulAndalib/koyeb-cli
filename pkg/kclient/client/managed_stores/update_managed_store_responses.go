// Code generated by go-swagger; DO NOT EDIT.

package managed_stores

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/koyeb/koyeb-cli/pkg/kclient/models"
)

// UpdateManagedStoreReader is a Reader for the UpdateManagedStore structure.
type UpdateManagedStoreReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateManagedStoreReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateManagedStoreOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateManagedStoreBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateManagedStoreForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateManagedStoreNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateManagedStoreOK creates a UpdateManagedStoreOK with default headers values
func NewUpdateManagedStoreOK() *UpdateManagedStoreOK {
	return &UpdateManagedStoreOK{}
}

/*UpdateManagedStoreOK handles this case with default header values.

A successful response.
*/
type UpdateManagedStoreOK struct {
	Payload *models.StorageManagedStoreReply
}

func (o *UpdateManagedStoreOK) Error() string {
	return fmt.Sprintf("[PUT /v1/managed_stores/{id}][%d] updateManagedStoreOK  %+v", 200, o.Payload)
}

func (o *UpdateManagedStoreOK) GetPayload() *models.StorageManagedStoreReply {
	return o.Payload
}

func (o *UpdateManagedStoreOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StorageManagedStoreReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateManagedStoreBadRequest creates a UpdateManagedStoreBadRequest with default headers values
func NewUpdateManagedStoreBadRequest() *UpdateManagedStoreBadRequest {
	return &UpdateManagedStoreBadRequest{}
}

/*UpdateManagedStoreBadRequest handles this case with default header values.

Validation error
*/
type UpdateManagedStoreBadRequest struct {
	Payload *models.CommonErrorWithFields
}

func (o *UpdateManagedStoreBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/managed_stores/{id}][%d] updateManagedStoreBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateManagedStoreBadRequest) GetPayload() *models.CommonErrorWithFields {
	return o.Payload
}

func (o *UpdateManagedStoreBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonErrorWithFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateManagedStoreForbidden creates a UpdateManagedStoreForbidden with default headers values
func NewUpdateManagedStoreForbidden() *UpdateManagedStoreForbidden {
	return &UpdateManagedStoreForbidden{}
}

/*UpdateManagedStoreForbidden handles this case with default header values.

Returned when the user does not have permission to access the resource.
*/
type UpdateManagedStoreForbidden struct {
	Payload *models.CommonError
}

func (o *UpdateManagedStoreForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/managed_stores/{id}][%d] updateManagedStoreForbidden  %+v", 403, o.Payload)
}

func (o *UpdateManagedStoreForbidden) GetPayload() *models.CommonError {
	return o.Payload
}

func (o *UpdateManagedStoreForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateManagedStoreNotFound creates a UpdateManagedStoreNotFound with default headers values
func NewUpdateManagedStoreNotFound() *UpdateManagedStoreNotFound {
	return &UpdateManagedStoreNotFound{}
}

/*UpdateManagedStoreNotFound handles this case with default header values.

Returned when the resource does not exist.
*/
type UpdateManagedStoreNotFound struct {
	Payload *models.CommonError
}

func (o *UpdateManagedStoreNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/managed_stores/{id}][%d] updateManagedStoreNotFound  %+v", 404, o.Payload)
}

func (o *UpdateManagedStoreNotFound) GetPayload() *models.CommonError {
	return o.Payload
}

func (o *UpdateManagedStoreNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
