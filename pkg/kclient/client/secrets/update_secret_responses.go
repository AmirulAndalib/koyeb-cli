// Code generated by go-swagger; DO NOT EDIT.

package secrets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/koyeb/koyeb-cli/pkg/kclient/models"
)

// UpdateSecretReader is a Reader for the UpdateSecret structure.
type UpdateSecretReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateSecretReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateSecretOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateSecretBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateSecretForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateSecretNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateSecretOK creates a UpdateSecretOK with default headers values
func NewUpdateSecretOK() *UpdateSecretOK {
	return &UpdateSecretOK{}
}

/*UpdateSecretOK handles this case with default header values.

A successful response.
*/
type UpdateSecretOK struct {
	Payload *models.StorageSecretReply
}

func (o *UpdateSecretOK) Error() string {
	return fmt.Sprintf("[PUT /v1/secrets/{id}][%d] updateSecretOK  %+v", 200, o.Payload)
}

func (o *UpdateSecretOK) GetPayload() *models.StorageSecretReply {
	return o.Payload
}

func (o *UpdateSecretOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StorageSecretReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSecretBadRequest creates a UpdateSecretBadRequest with default headers values
func NewUpdateSecretBadRequest() *UpdateSecretBadRequest {
	return &UpdateSecretBadRequest{}
}

/*UpdateSecretBadRequest handles this case with default header values.

Validation error
*/
type UpdateSecretBadRequest struct {
	Payload *models.CommonErrorWithFields
}

func (o *UpdateSecretBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/secrets/{id}][%d] updateSecretBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateSecretBadRequest) GetPayload() *models.CommonErrorWithFields {
	return o.Payload
}

func (o *UpdateSecretBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonErrorWithFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSecretForbidden creates a UpdateSecretForbidden with default headers values
func NewUpdateSecretForbidden() *UpdateSecretForbidden {
	return &UpdateSecretForbidden{}
}

/*UpdateSecretForbidden handles this case with default header values.

Returned when the user does not have permission to access the resource.
*/
type UpdateSecretForbidden struct {
	Payload *models.CommonError
}

func (o *UpdateSecretForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/secrets/{id}][%d] updateSecretForbidden  %+v", 403, o.Payload)
}

func (o *UpdateSecretForbidden) GetPayload() *models.CommonError {
	return o.Payload
}

func (o *UpdateSecretForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSecretNotFound creates a UpdateSecretNotFound with default headers values
func NewUpdateSecretNotFound() *UpdateSecretNotFound {
	return &UpdateSecretNotFound{}
}

/*UpdateSecretNotFound handles this case with default header values.

Returned when the resource does not exist.
*/
type UpdateSecretNotFound struct {
	Payload *models.CommonError
}

func (o *UpdateSecretNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/secrets/{id}][%d] updateSecretNotFound  %+v", 404, o.Payload)
}

func (o *UpdateSecretNotFound) GetPayload() *models.CommonError {
	return o.Payload
}

func (o *UpdateSecretNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
