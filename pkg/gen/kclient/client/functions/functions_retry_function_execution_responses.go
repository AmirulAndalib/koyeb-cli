// Code generated by go-swagger; DO NOT EDIT.

package functions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/koyeb/koyeb-cli/pkg/gen/kclient/models"
)

// FunctionsRetryFunctionExecutionReader is a Reader for the FunctionsRetryFunctionExecution structure.
type FunctionsRetryFunctionExecutionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FunctionsRetryFunctionExecutionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewFunctionsRetryFunctionExecutionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewFunctionsRetryFunctionExecutionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewFunctionsRetryFunctionExecutionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewFunctionsRetryFunctionExecutionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewFunctionsRetryFunctionExecutionDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewFunctionsRetryFunctionExecutionOK creates a FunctionsRetryFunctionExecutionOK with default headers values
func NewFunctionsRetryFunctionExecutionOK() *FunctionsRetryFunctionExecutionOK {
	return &FunctionsRetryFunctionExecutionOK{}
}

/*FunctionsRetryFunctionExecutionOK handles this case with default header values.

A successful response.
*/
type FunctionsRetryFunctionExecutionOK struct {
	Payload models.StorageRetryFunctionExecutionReply
}

func (o *FunctionsRetryFunctionExecutionOK) Error() string {
	return fmt.Sprintf("[POST /v1/stacks/{stack_id}/executions/{run_id}/retrigger][%d] functionsRetryFunctionExecutionOK  %+v", 200, o.Payload)
}

func (o *FunctionsRetryFunctionExecutionOK) GetPayload() models.StorageRetryFunctionExecutionReply {
	return o.Payload
}

func (o *FunctionsRetryFunctionExecutionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFunctionsRetryFunctionExecutionBadRequest creates a FunctionsRetryFunctionExecutionBadRequest with default headers values
func NewFunctionsRetryFunctionExecutionBadRequest() *FunctionsRetryFunctionExecutionBadRequest {
	return &FunctionsRetryFunctionExecutionBadRequest{}
}

/*FunctionsRetryFunctionExecutionBadRequest handles this case with default header values.

Validation error
*/
type FunctionsRetryFunctionExecutionBadRequest struct {
	Payload *models.CommonErrorWithFields
}

func (o *FunctionsRetryFunctionExecutionBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/stacks/{stack_id}/executions/{run_id}/retrigger][%d] functionsRetryFunctionExecutionBadRequest  %+v", 400, o.Payload)
}

func (o *FunctionsRetryFunctionExecutionBadRequest) GetPayload() *models.CommonErrorWithFields {
	return o.Payload
}

func (o *FunctionsRetryFunctionExecutionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonErrorWithFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFunctionsRetryFunctionExecutionForbidden creates a FunctionsRetryFunctionExecutionForbidden with default headers values
func NewFunctionsRetryFunctionExecutionForbidden() *FunctionsRetryFunctionExecutionForbidden {
	return &FunctionsRetryFunctionExecutionForbidden{}
}

/*FunctionsRetryFunctionExecutionForbidden handles this case with default header values.

Returned when the user does not have permission to access the resource.
*/
type FunctionsRetryFunctionExecutionForbidden struct {
	Payload *models.CommonError
}

func (o *FunctionsRetryFunctionExecutionForbidden) Error() string {
	return fmt.Sprintf("[POST /v1/stacks/{stack_id}/executions/{run_id}/retrigger][%d] functionsRetryFunctionExecutionForbidden  %+v", 403, o.Payload)
}

func (o *FunctionsRetryFunctionExecutionForbidden) GetPayload() *models.CommonError {
	return o.Payload
}

func (o *FunctionsRetryFunctionExecutionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFunctionsRetryFunctionExecutionNotFound creates a FunctionsRetryFunctionExecutionNotFound with default headers values
func NewFunctionsRetryFunctionExecutionNotFound() *FunctionsRetryFunctionExecutionNotFound {
	return &FunctionsRetryFunctionExecutionNotFound{}
}

/*FunctionsRetryFunctionExecutionNotFound handles this case with default header values.

Returned when the resource does not exist.
*/
type FunctionsRetryFunctionExecutionNotFound struct {
	Payload *models.CommonError
}

func (o *FunctionsRetryFunctionExecutionNotFound) Error() string {
	return fmt.Sprintf("[POST /v1/stacks/{stack_id}/executions/{run_id}/retrigger][%d] functionsRetryFunctionExecutionNotFound  %+v", 404, o.Payload)
}

func (o *FunctionsRetryFunctionExecutionNotFound) GetPayload() *models.CommonError {
	return o.Payload
}

func (o *FunctionsRetryFunctionExecutionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFunctionsRetryFunctionExecutionDefault creates a FunctionsRetryFunctionExecutionDefault with default headers values
func NewFunctionsRetryFunctionExecutionDefault(code int) *FunctionsRetryFunctionExecutionDefault {
	return &FunctionsRetryFunctionExecutionDefault{
		_statusCode: code,
	}
}

/*FunctionsRetryFunctionExecutionDefault handles this case with default header values.

An unexpected error response
*/
type FunctionsRetryFunctionExecutionDefault struct {
	_statusCode int

	Payload *models.GatewayruntimeError
}

// Code gets the status code for the functions retry function execution default response
func (o *FunctionsRetryFunctionExecutionDefault) Code() int {
	return o._statusCode
}

func (o *FunctionsRetryFunctionExecutionDefault) Error() string {
	return fmt.Sprintf("[POST /v1/stacks/{stack_id}/executions/{run_id}/retrigger][%d] Functions_RetryFunctionExecution default  %+v", o._statusCode, o.Payload)
}

func (o *FunctionsRetryFunctionExecutionDefault) GetPayload() *models.GatewayruntimeError {
	return o.Payload
}

func (o *FunctionsRetryFunctionExecutionDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GatewayruntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
