// Code generated by go-swagger; DO NOT EDIT.

package connectors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new connectors API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for connectors API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	ConnectorsDeleteConnector(params *ConnectorsDeleteConnectorParams, authInfo runtime.ClientAuthInfoWriter) (*ConnectorsDeleteConnectorOK, error)

	ConnectorsGetConnector(params *ConnectorsGetConnectorParams, authInfo runtime.ClientAuthInfoWriter) (*ConnectorsGetConnectorOK, error)

	ConnectorsListConnectors(params *ConnectorsListConnectorsParams, authInfo runtime.ClientAuthInfoWriter) (*ConnectorsListConnectorsOK, error)

	ConnectorsNewConnector(params *ConnectorsNewConnectorParams, authInfo runtime.ClientAuthInfoWriter) (*ConnectorsNewConnectorOK, error)

	ConnectorsUpdateConnector(params *ConnectorsUpdateConnectorParams, authInfo runtime.ClientAuthInfoWriter) (*ConnectorsUpdateConnectorOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ConnectorsDeleteConnector deletes a connector
*/
func (a *Client) ConnectorsDeleteConnector(params *ConnectorsDeleteConnectorParams, authInfo runtime.ClientAuthInfoWriter) (*ConnectorsDeleteConnectorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectorsDeleteConnectorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Connectors_DeleteConnector",
		Method:             "DELETE",
		PathPattern:        "/v1/connectors/{idOrName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConnectorsDeleteConnectorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectorsDeleteConnectorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConnectorsDeleteConnectorDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ConnectorsGetConnector fetches a connector
*/
func (a *Client) ConnectorsGetConnector(params *ConnectorsGetConnectorParams, authInfo runtime.ClientAuthInfoWriter) (*ConnectorsGetConnectorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectorsGetConnectorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Connectors_GetConnector",
		Method:             "GET",
		PathPattern:        "/v1/connectors/{idOrName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConnectorsGetConnectorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectorsGetConnectorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConnectorsGetConnectorDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ConnectorsListConnectors lists connectors
*/
func (a *Client) ConnectorsListConnectors(params *ConnectorsListConnectorsParams, authInfo runtime.ClientAuthInfoWriter) (*ConnectorsListConnectorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectorsListConnectorsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Connectors_ListConnectors",
		Method:             "GET",
		PathPattern:        "/v1/connectors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConnectorsListConnectorsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectorsListConnectorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConnectorsListConnectorsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ConnectorsNewConnector creates a new connector
*/
func (a *Client) ConnectorsNewConnector(params *ConnectorsNewConnectorParams, authInfo runtime.ClientAuthInfoWriter) (*ConnectorsNewConnectorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectorsNewConnectorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Connectors_NewConnector",
		Method:             "POST",
		PathPattern:        "/v1/connectors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConnectorsNewConnectorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectorsNewConnectorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConnectorsNewConnectorDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ConnectorsUpdateConnector updates a connector
*/
func (a *Client) ConnectorsUpdateConnector(params *ConnectorsUpdateConnectorParams, authInfo runtime.ClientAuthInfoWriter) (*ConnectorsUpdateConnectorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectorsUpdateConnectorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Connectors_UpdateConnector",
		Method:             "PUT",
		PathPattern:        "/v1/connectors/{idOrName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConnectorsUpdateConnectorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectorsUpdateConnectorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConnectorsUpdateConnectorDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
