// Code generated by go-swagger; DO NOT EDIT.

package connectors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewConnectorsDeleteConnectorParams creates a new ConnectorsDeleteConnectorParams object
// with the default values initialized.
func NewConnectorsDeleteConnectorParams() *ConnectorsDeleteConnectorParams {
	var ()
	return &ConnectorsDeleteConnectorParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewConnectorsDeleteConnectorParamsWithTimeout creates a new ConnectorsDeleteConnectorParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewConnectorsDeleteConnectorParamsWithTimeout(timeout time.Duration) *ConnectorsDeleteConnectorParams {
	var ()
	return &ConnectorsDeleteConnectorParams{

		timeout: timeout,
	}
}

// NewConnectorsDeleteConnectorParamsWithContext creates a new ConnectorsDeleteConnectorParams object
// with the default values initialized, and the ability to set a context for a request
func NewConnectorsDeleteConnectorParamsWithContext(ctx context.Context) *ConnectorsDeleteConnectorParams {
	var ()
	return &ConnectorsDeleteConnectorParams{

		Context: ctx,
	}
}

// NewConnectorsDeleteConnectorParamsWithHTTPClient creates a new ConnectorsDeleteConnectorParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewConnectorsDeleteConnectorParamsWithHTTPClient(client *http.Client) *ConnectorsDeleteConnectorParams {
	var ()
	return &ConnectorsDeleteConnectorParams{
		HTTPClient: client,
	}
}

/*ConnectorsDeleteConnectorParams contains all the parameters to send to the API endpoint
for the connectors delete connector operation typically these are written to a http.Request
*/
type ConnectorsDeleteConnectorParams struct {

	/*IDOrName*/
	IDOrName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the connectors delete connector params
func (o *ConnectorsDeleteConnectorParams) WithTimeout(timeout time.Duration) *ConnectorsDeleteConnectorParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the connectors delete connector params
func (o *ConnectorsDeleteConnectorParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the connectors delete connector params
func (o *ConnectorsDeleteConnectorParams) WithContext(ctx context.Context) *ConnectorsDeleteConnectorParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the connectors delete connector params
func (o *ConnectorsDeleteConnectorParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the connectors delete connector params
func (o *ConnectorsDeleteConnectorParams) WithHTTPClient(client *http.Client) *ConnectorsDeleteConnectorParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the connectors delete connector params
func (o *ConnectorsDeleteConnectorParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIDOrName adds the iDOrName to the connectors delete connector params
func (o *ConnectorsDeleteConnectorParams) WithIDOrName(iDOrName string) *ConnectorsDeleteConnectorParams {
	o.SetIDOrName(iDOrName)
	return o
}

// SetIDOrName adds the idOrName to the connectors delete connector params
func (o *ConnectorsDeleteConnectorParams) SetIDOrName(iDOrName string) {
	o.IDOrName = iDOrName
}

// WriteToRequest writes these params to a swagger request
func (o *ConnectorsDeleteConnectorParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param idOrName
	if err := r.SetPathParam("idOrName", o.IDOrName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
