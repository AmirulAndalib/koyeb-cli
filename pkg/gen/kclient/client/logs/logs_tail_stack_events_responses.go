// Code generated by go-swagger; DO NOT EDIT.

package logs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/koyeb/koyeb-cli/pkg/gen/kclient/models"
)

// LogsTailStackEventsReader is a Reader for the LogsTailStackEvents structure.
type LogsTailStackEventsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LogsTailStackEventsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewLogsTailStackEventsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewLogsTailStackEventsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewLogsTailStackEventsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewLogsTailStackEventsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewLogsTailStackEventsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewLogsTailStackEventsOK creates a LogsTailStackEventsOK with default headers values
func NewLogsTailStackEventsOK() *LogsTailStackEventsOK {
	return &LogsTailStackEventsOK{}
}

/*LogsTailStackEventsOK handles this case with default header values.

A successful response.(streaming responses)
*/
type LogsTailStackEventsOK struct {
	Payload *LogsTailStackEventsOKBody
}

func (o *LogsTailStackEventsOK) Error() string {
	return fmt.Sprintf("[GET /v1/stacks/{stack_id}/events/tail][%d] logsTailStackEventsOK  %+v", 200, o.Payload)
}

func (o *LogsTailStackEventsOK) GetPayload() *LogsTailStackEventsOKBody {
	return o.Payload
}

func (o *LogsTailStackEventsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(LogsTailStackEventsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLogsTailStackEventsBadRequest creates a LogsTailStackEventsBadRequest with default headers values
func NewLogsTailStackEventsBadRequest() *LogsTailStackEventsBadRequest {
	return &LogsTailStackEventsBadRequest{}
}

/*LogsTailStackEventsBadRequest handles this case with default header values.

Validation error
*/
type LogsTailStackEventsBadRequest struct {
	Payload *models.CommonErrorWithFields
}

func (o *LogsTailStackEventsBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/stacks/{stack_id}/events/tail][%d] logsTailStackEventsBadRequest  %+v", 400, o.Payload)
}

func (o *LogsTailStackEventsBadRequest) GetPayload() *models.CommonErrorWithFields {
	return o.Payload
}

func (o *LogsTailStackEventsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonErrorWithFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLogsTailStackEventsForbidden creates a LogsTailStackEventsForbidden with default headers values
func NewLogsTailStackEventsForbidden() *LogsTailStackEventsForbidden {
	return &LogsTailStackEventsForbidden{}
}

/*LogsTailStackEventsForbidden handles this case with default header values.

Returned when the user does not have permission to access the resource.
*/
type LogsTailStackEventsForbidden struct {
	Payload *models.CommonError
}

func (o *LogsTailStackEventsForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/stacks/{stack_id}/events/tail][%d] logsTailStackEventsForbidden  %+v", 403, o.Payload)
}

func (o *LogsTailStackEventsForbidden) GetPayload() *models.CommonError {
	return o.Payload
}

func (o *LogsTailStackEventsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLogsTailStackEventsNotFound creates a LogsTailStackEventsNotFound with default headers values
func NewLogsTailStackEventsNotFound() *LogsTailStackEventsNotFound {
	return &LogsTailStackEventsNotFound{}
}

/*LogsTailStackEventsNotFound handles this case with default header values.

Returned when the resource does not exist.
*/
type LogsTailStackEventsNotFound struct {
	Payload *models.CommonError
}

func (o *LogsTailStackEventsNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/stacks/{stack_id}/events/tail][%d] logsTailStackEventsNotFound  %+v", 404, o.Payload)
}

func (o *LogsTailStackEventsNotFound) GetPayload() *models.CommonError {
	return o.Payload
}

func (o *LogsTailStackEventsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLogsTailStackEventsDefault creates a LogsTailStackEventsDefault with default headers values
func NewLogsTailStackEventsDefault(code int) *LogsTailStackEventsDefault {
	return &LogsTailStackEventsDefault{
		_statusCode: code,
	}
}

/*LogsTailStackEventsDefault handles this case with default header values.

An unexpected error response
*/
type LogsTailStackEventsDefault struct {
	_statusCode int

	Payload *models.GatewayruntimeError
}

// Code gets the status code for the logs tail stack events default response
func (o *LogsTailStackEventsDefault) Code() int {
	return o._statusCode
}

func (o *LogsTailStackEventsDefault) Error() string {
	return fmt.Sprintf("[GET /v1/stacks/{stack_id}/events/tail][%d] logs_TailStackEvents default  %+v", o._statusCode, o.Payload)
}

func (o *LogsTailStackEventsDefault) GetPayload() *models.GatewayruntimeError {
	return o.Payload
}

func (o *LogsTailStackEventsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GatewayruntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*LogsTailStackEventsOKBody Stream result of storageEvent
swagger:model LogsTailStackEventsOKBody
*/
type LogsTailStackEventsOKBody struct {

	// error
	Error *models.RuntimeStreamError `json:"error,omitempty"`

	// result
	Result *models.StorageEvent `json:"result,omitempty"`
}

// Validate validates this logs tail stack events o k body
func (o *LogsTailStackEventsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *LogsTailStackEventsOKBody) validateError(formats strfmt.Registry) error {

	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("logsTailStackEventsOK" + "." + "error")
			}
			return err
		}
	}

	return nil
}

func (o *LogsTailStackEventsOKBody) validateResult(formats strfmt.Registry) error {

	if swag.IsZero(o.Result) { // not required
		return nil
	}

	if o.Result != nil {
		if err := o.Result.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("logsTailStackEventsOK" + "." + "result")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *LogsTailStackEventsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *LogsTailStackEventsOKBody) UnmarshalBinary(b []byte) error {
	var res LogsTailStackEventsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
