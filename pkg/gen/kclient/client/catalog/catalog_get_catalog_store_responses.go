// Code generated by go-swagger; DO NOT EDIT.

package catalog

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/koyeb/koyeb-cli/pkg/gen/kclient/models"
)

// CatalogGetCatalogStoreReader is a Reader for the CatalogGetCatalogStore structure.
type CatalogGetCatalogStoreReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CatalogGetCatalogStoreReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCatalogGetCatalogStoreOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCatalogGetCatalogStoreBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCatalogGetCatalogStoreForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCatalogGetCatalogStoreNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewCatalogGetCatalogStoreDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCatalogGetCatalogStoreOK creates a CatalogGetCatalogStoreOK with default headers values
func NewCatalogGetCatalogStoreOK() *CatalogGetCatalogStoreOK {
	return &CatalogGetCatalogStoreOK{}
}

/*CatalogGetCatalogStoreOK handles this case with default header values.

A successful response.
*/
type CatalogGetCatalogStoreOK struct {
	Payload *models.StorageCatalogStoreReply
}

func (o *CatalogGetCatalogStoreOK) Error() string {
	return fmt.Sprintf("[GET /v1/catalog/stores/{name}][%d] catalogGetCatalogStoreOK  %+v", 200, o.Payload)
}

func (o *CatalogGetCatalogStoreOK) GetPayload() *models.StorageCatalogStoreReply {
	return o.Payload
}

func (o *CatalogGetCatalogStoreOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StorageCatalogStoreReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCatalogGetCatalogStoreBadRequest creates a CatalogGetCatalogStoreBadRequest with default headers values
func NewCatalogGetCatalogStoreBadRequest() *CatalogGetCatalogStoreBadRequest {
	return &CatalogGetCatalogStoreBadRequest{}
}

/*CatalogGetCatalogStoreBadRequest handles this case with default header values.

Validation error
*/
type CatalogGetCatalogStoreBadRequest struct {
	Payload *models.CommonErrorWithFields
}

func (o *CatalogGetCatalogStoreBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/catalog/stores/{name}][%d] catalogGetCatalogStoreBadRequest  %+v", 400, o.Payload)
}

func (o *CatalogGetCatalogStoreBadRequest) GetPayload() *models.CommonErrorWithFields {
	return o.Payload
}

func (o *CatalogGetCatalogStoreBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonErrorWithFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCatalogGetCatalogStoreForbidden creates a CatalogGetCatalogStoreForbidden with default headers values
func NewCatalogGetCatalogStoreForbidden() *CatalogGetCatalogStoreForbidden {
	return &CatalogGetCatalogStoreForbidden{}
}

/*CatalogGetCatalogStoreForbidden handles this case with default header values.

Returned when the user does not have permission to access the resource.
*/
type CatalogGetCatalogStoreForbidden struct {
	Payload *models.CommonError
}

func (o *CatalogGetCatalogStoreForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/catalog/stores/{name}][%d] catalogGetCatalogStoreForbidden  %+v", 403, o.Payload)
}

func (o *CatalogGetCatalogStoreForbidden) GetPayload() *models.CommonError {
	return o.Payload
}

func (o *CatalogGetCatalogStoreForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCatalogGetCatalogStoreNotFound creates a CatalogGetCatalogStoreNotFound with default headers values
func NewCatalogGetCatalogStoreNotFound() *CatalogGetCatalogStoreNotFound {
	return &CatalogGetCatalogStoreNotFound{}
}

/*CatalogGetCatalogStoreNotFound handles this case with default header values.

Returned when the resource does not exist.
*/
type CatalogGetCatalogStoreNotFound struct {
	Payload *models.CommonError
}

func (o *CatalogGetCatalogStoreNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/catalog/stores/{name}][%d] catalogGetCatalogStoreNotFound  %+v", 404, o.Payload)
}

func (o *CatalogGetCatalogStoreNotFound) GetPayload() *models.CommonError {
	return o.Payload
}

func (o *CatalogGetCatalogStoreNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCatalogGetCatalogStoreDefault creates a CatalogGetCatalogStoreDefault with default headers values
func NewCatalogGetCatalogStoreDefault(code int) *CatalogGetCatalogStoreDefault {
	return &CatalogGetCatalogStoreDefault{
		_statusCode: code,
	}
}

/*CatalogGetCatalogStoreDefault handles this case with default header values.

An unexpected error response
*/
type CatalogGetCatalogStoreDefault struct {
	_statusCode int

	Payload *models.GatewayruntimeError
}

// Code gets the status code for the catalog get catalog store default response
func (o *CatalogGetCatalogStoreDefault) Code() int {
	return o._statusCode
}

func (o *CatalogGetCatalogStoreDefault) Error() string {
	return fmt.Sprintf("[GET /v1/catalog/stores/{name}][%d] Catalog_GetCatalogStore default  %+v", o._statusCode, o.Payload)
}

func (o *CatalogGetCatalogStoreDefault) GetPayload() *models.GatewayruntimeError {
	return o.Payload
}

func (o *CatalogGetCatalogStoreDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GatewayruntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
