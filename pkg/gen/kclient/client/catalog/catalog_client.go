// Code generated by go-swagger; DO NOT EDIT.

package catalog

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new catalog API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for catalog API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CatalogGetCatalogFunction(params *CatalogGetCatalogFunctionParams, authInfo runtime.ClientAuthInfoWriter) (*CatalogGetCatalogFunctionOK, error)

	CatalogGetCatalogStack(params *CatalogGetCatalogStackParams, authInfo runtime.ClientAuthInfoWriter) (*CatalogGetCatalogStackOK, error)

	CatalogGetCatalogStore(params *CatalogGetCatalogStoreParams, authInfo runtime.ClientAuthInfoWriter) (*CatalogGetCatalogStoreOK, error)

	CatalogListCatalogFunctions(params *CatalogListCatalogFunctionsParams, authInfo runtime.ClientAuthInfoWriter) (*CatalogListCatalogFunctionsOK, error)

	CatalogListCatalogStacks(params *CatalogListCatalogStacksParams, authInfo runtime.ClientAuthInfoWriter) (*CatalogListCatalogStacksOK, error)

	CatalogListCatalogStores(params *CatalogListCatalogStoresParams, authInfo runtime.ClientAuthInfoWriter) (*CatalogListCatalogStoresOK, error)

	CatalogValidateYaml(params *CatalogValidateYamlParams, authInfo runtime.ClientAuthInfoWriter) (*CatalogValidateYamlOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CatalogGetCatalogFunction fetches an item of the function catalog
*/
func (a *Client) CatalogGetCatalogFunction(params *CatalogGetCatalogFunctionParams, authInfo runtime.ClientAuthInfoWriter) (*CatalogGetCatalogFunctionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCatalogGetCatalogFunctionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Catalog_GetCatalogFunction",
		Method:             "GET",
		PathPattern:        "/v1/catalog/functions/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CatalogGetCatalogFunctionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CatalogGetCatalogFunctionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CatalogGetCatalogFunctionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CatalogGetCatalogStack fetches an item of the stack catalog
*/
func (a *Client) CatalogGetCatalogStack(params *CatalogGetCatalogStackParams, authInfo runtime.ClientAuthInfoWriter) (*CatalogGetCatalogStackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCatalogGetCatalogStackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Catalog_GetCatalogStack",
		Method:             "GET",
		PathPattern:        "/v1/catalog/stacks/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CatalogGetCatalogStackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CatalogGetCatalogStackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CatalogGetCatalogStackDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CatalogGetCatalogStore fetches an item of the store catalog
*/
func (a *Client) CatalogGetCatalogStore(params *CatalogGetCatalogStoreParams, authInfo runtime.ClientAuthInfoWriter) (*CatalogGetCatalogStoreOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCatalogGetCatalogStoreParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Catalog_GetCatalogStore",
		Method:             "GET",
		PathPattern:        "/v1/catalog/stores/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CatalogGetCatalogStoreReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CatalogGetCatalogStoreOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CatalogGetCatalogStoreDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CatalogListCatalogFunctions shows catalog of functions
*/
func (a *Client) CatalogListCatalogFunctions(params *CatalogListCatalogFunctionsParams, authInfo runtime.ClientAuthInfoWriter) (*CatalogListCatalogFunctionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCatalogListCatalogFunctionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Catalog_ListCatalogFunctions",
		Method:             "GET",
		PathPattern:        "/v1/catalog/functions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CatalogListCatalogFunctionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CatalogListCatalogFunctionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CatalogListCatalogFunctionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CatalogListCatalogStacks shows catalog of stacks
*/
func (a *Client) CatalogListCatalogStacks(params *CatalogListCatalogStacksParams, authInfo runtime.ClientAuthInfoWriter) (*CatalogListCatalogStacksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCatalogListCatalogStacksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Catalog_ListCatalogStacks",
		Method:             "GET",
		PathPattern:        "/v1/catalog/stacks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CatalogListCatalogStacksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CatalogListCatalogStacksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CatalogListCatalogStacksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CatalogListCatalogStores shows catalog of stores
*/
func (a *Client) CatalogListCatalogStores(params *CatalogListCatalogStoresParams, authInfo runtime.ClientAuthInfoWriter) (*CatalogListCatalogStoresOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCatalogListCatalogStoresParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Catalog_ListCatalogStores",
		Method:             "GET",
		PathPattern:        "/v1/catalog/stores",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CatalogListCatalogStoresReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CatalogListCatalogStoresOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CatalogListCatalogStoresDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CatalogValidateYaml validates a yaml stack
*/
func (a *Client) CatalogValidateYaml(params *CatalogValidateYamlParams, authInfo runtime.ClientAuthInfoWriter) (*CatalogValidateYamlOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCatalogValidateYamlParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Catalog_ValidateYaml",
		Method:             "POST",
		PathPattern:        "/v1/validate_yaml",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CatalogValidateYamlReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CatalogValidateYamlOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CatalogValidateYamlDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
