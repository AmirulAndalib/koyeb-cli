// Code generated by go-swagger; DO NOT EDIT.

package catalog

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/koyeb/koyeb-cli/pkg/gen/kclient/models"
)

// CatalogGetCatalogFunctionReader is a Reader for the CatalogGetCatalogFunction structure.
type CatalogGetCatalogFunctionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CatalogGetCatalogFunctionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCatalogGetCatalogFunctionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCatalogGetCatalogFunctionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCatalogGetCatalogFunctionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCatalogGetCatalogFunctionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewCatalogGetCatalogFunctionDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCatalogGetCatalogFunctionOK creates a CatalogGetCatalogFunctionOK with default headers values
func NewCatalogGetCatalogFunctionOK() *CatalogGetCatalogFunctionOK {
	return &CatalogGetCatalogFunctionOK{}
}

/*CatalogGetCatalogFunctionOK handles this case with default header values.

A successful response.
*/
type CatalogGetCatalogFunctionOK struct {
	Payload *models.StorageGetCatalogFunctionsReply
}

func (o *CatalogGetCatalogFunctionOK) Error() string {
	return fmt.Sprintf("[GET /v1/catalog/functions/{name}][%d] catalogGetCatalogFunctionOK  %+v", 200, o.Payload)
}

func (o *CatalogGetCatalogFunctionOK) GetPayload() *models.StorageGetCatalogFunctionsReply {
	return o.Payload
}

func (o *CatalogGetCatalogFunctionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StorageGetCatalogFunctionsReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCatalogGetCatalogFunctionBadRequest creates a CatalogGetCatalogFunctionBadRequest with default headers values
func NewCatalogGetCatalogFunctionBadRequest() *CatalogGetCatalogFunctionBadRequest {
	return &CatalogGetCatalogFunctionBadRequest{}
}

/*CatalogGetCatalogFunctionBadRequest handles this case with default header values.

Validation error
*/
type CatalogGetCatalogFunctionBadRequest struct {
	Payload *models.CommonErrorWithFields
}

func (o *CatalogGetCatalogFunctionBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/catalog/functions/{name}][%d] catalogGetCatalogFunctionBadRequest  %+v", 400, o.Payload)
}

func (o *CatalogGetCatalogFunctionBadRequest) GetPayload() *models.CommonErrorWithFields {
	return o.Payload
}

func (o *CatalogGetCatalogFunctionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonErrorWithFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCatalogGetCatalogFunctionForbidden creates a CatalogGetCatalogFunctionForbidden with default headers values
func NewCatalogGetCatalogFunctionForbidden() *CatalogGetCatalogFunctionForbidden {
	return &CatalogGetCatalogFunctionForbidden{}
}

/*CatalogGetCatalogFunctionForbidden handles this case with default header values.

Returned when the user does not have permission to access the resource.
*/
type CatalogGetCatalogFunctionForbidden struct {
	Payload *models.CommonError
}

func (o *CatalogGetCatalogFunctionForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/catalog/functions/{name}][%d] catalogGetCatalogFunctionForbidden  %+v", 403, o.Payload)
}

func (o *CatalogGetCatalogFunctionForbidden) GetPayload() *models.CommonError {
	return o.Payload
}

func (o *CatalogGetCatalogFunctionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCatalogGetCatalogFunctionNotFound creates a CatalogGetCatalogFunctionNotFound with default headers values
func NewCatalogGetCatalogFunctionNotFound() *CatalogGetCatalogFunctionNotFound {
	return &CatalogGetCatalogFunctionNotFound{}
}

/*CatalogGetCatalogFunctionNotFound handles this case with default header values.

Returned when the resource does not exist.
*/
type CatalogGetCatalogFunctionNotFound struct {
	Payload *models.CommonError
}

func (o *CatalogGetCatalogFunctionNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/catalog/functions/{name}][%d] catalogGetCatalogFunctionNotFound  %+v", 404, o.Payload)
}

func (o *CatalogGetCatalogFunctionNotFound) GetPayload() *models.CommonError {
	return o.Payload
}

func (o *CatalogGetCatalogFunctionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCatalogGetCatalogFunctionDefault creates a CatalogGetCatalogFunctionDefault with default headers values
func NewCatalogGetCatalogFunctionDefault(code int) *CatalogGetCatalogFunctionDefault {
	return &CatalogGetCatalogFunctionDefault{
		_statusCode: code,
	}
}

/*CatalogGetCatalogFunctionDefault handles this case with default header values.

An unexpected error response
*/
type CatalogGetCatalogFunctionDefault struct {
	_statusCode int

	Payload *models.GatewayruntimeError
}

// Code gets the status code for the catalog get catalog function default response
func (o *CatalogGetCatalogFunctionDefault) Code() int {
	return o._statusCode
}

func (o *CatalogGetCatalogFunctionDefault) Error() string {
	return fmt.Sprintf("[GET /v1/catalog/functions/{name}][%d] Catalog_GetCatalogFunction default  %+v", o._statusCode, o.Payload)
}

func (o *CatalogGetCatalogFunctionDefault) GetPayload() *models.GatewayruntimeError {
	return o.Payload
}

func (o *CatalogGetCatalogFunctionDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GatewayruntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
