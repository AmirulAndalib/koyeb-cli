// Code generated by go-swagger; DO NOT EDIT.

package session

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/koyeb/koyeb-cli/pkg/gen/kclient/models"
)

// SessionRefreshTokenReader is a Reader for the SessionRefreshToken structure.
type SessionRefreshTokenReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SessionRefreshTokenReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSessionRefreshTokenOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSessionRefreshTokenBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSessionRefreshTokenForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSessionRefreshTokenNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewSessionRefreshTokenDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewSessionRefreshTokenOK creates a SessionRefreshTokenOK with default headers values
func NewSessionRefreshTokenOK() *SessionRefreshTokenOK {
	return &SessionRefreshTokenOK{}
}

/*SessionRefreshTokenOK handles this case with default header values.

A successful response.
*/
type SessionRefreshTokenOK struct {
	Payload *models.AccountLoginReply
}

func (o *SessionRefreshTokenOK) Error() string {
	return fmt.Sprintf("[PUT /v1/account/refresh][%d] sessionRefreshTokenOK  %+v", 200, o.Payload)
}

func (o *SessionRefreshTokenOK) GetPayload() *models.AccountLoginReply {
	return o.Payload
}

func (o *SessionRefreshTokenOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AccountLoginReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSessionRefreshTokenBadRequest creates a SessionRefreshTokenBadRequest with default headers values
func NewSessionRefreshTokenBadRequest() *SessionRefreshTokenBadRequest {
	return &SessionRefreshTokenBadRequest{}
}

/*SessionRefreshTokenBadRequest handles this case with default header values.

Validation error
*/
type SessionRefreshTokenBadRequest struct {
	Payload *models.CommonErrorWithFields
}

func (o *SessionRefreshTokenBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/account/refresh][%d] sessionRefreshTokenBadRequest  %+v", 400, o.Payload)
}

func (o *SessionRefreshTokenBadRequest) GetPayload() *models.CommonErrorWithFields {
	return o.Payload
}

func (o *SessionRefreshTokenBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonErrorWithFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSessionRefreshTokenForbidden creates a SessionRefreshTokenForbidden with default headers values
func NewSessionRefreshTokenForbidden() *SessionRefreshTokenForbidden {
	return &SessionRefreshTokenForbidden{}
}

/*SessionRefreshTokenForbidden handles this case with default header values.

Returned when the user does not have permission to access the resource.
*/
type SessionRefreshTokenForbidden struct {
	Payload *models.CommonError
}

func (o *SessionRefreshTokenForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/account/refresh][%d] sessionRefreshTokenForbidden  %+v", 403, o.Payload)
}

func (o *SessionRefreshTokenForbidden) GetPayload() *models.CommonError {
	return o.Payload
}

func (o *SessionRefreshTokenForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSessionRefreshTokenNotFound creates a SessionRefreshTokenNotFound with default headers values
func NewSessionRefreshTokenNotFound() *SessionRefreshTokenNotFound {
	return &SessionRefreshTokenNotFound{}
}

/*SessionRefreshTokenNotFound handles this case with default header values.

Returned when the resource does not exist.
*/
type SessionRefreshTokenNotFound struct {
	Payload *models.CommonError
}

func (o *SessionRefreshTokenNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/account/refresh][%d] sessionRefreshTokenNotFound  %+v", 404, o.Payload)
}

func (o *SessionRefreshTokenNotFound) GetPayload() *models.CommonError {
	return o.Payload
}

func (o *SessionRefreshTokenNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSessionRefreshTokenDefault creates a SessionRefreshTokenDefault with default headers values
func NewSessionRefreshTokenDefault(code int) *SessionRefreshTokenDefault {
	return &SessionRefreshTokenDefault{
		_statusCode: code,
	}
}

/*SessionRefreshTokenDefault handles this case with default header values.

An unexpected error response
*/
type SessionRefreshTokenDefault struct {
	_statusCode int

	Payload *models.GatewayruntimeError
}

// Code gets the status code for the session refresh token default response
func (o *SessionRefreshTokenDefault) Code() int {
	return o._statusCode
}

func (o *SessionRefreshTokenDefault) Error() string {
	return fmt.Sprintf("[PUT /v1/account/refresh][%d] session_RefreshToken default  %+v", o._statusCode, o.Payload)
}

func (o *SessionRefreshTokenDefault) GetPayload() *models.GatewayruntimeError {
	return o.Payload
}

func (o *SessionRefreshTokenDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GatewayruntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
