// Code generated by go-swagger; DO NOT EDIT.

package session

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/koyeb/koyeb-cli/pkg/gen/kclient/models"
)

// SessionLogoutReader is a Reader for the SessionLogout structure.
type SessionLogoutReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SessionLogoutReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSessionLogoutOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSessionLogoutBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSessionLogoutForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSessionLogoutNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewSessionLogoutDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewSessionLogoutOK creates a SessionLogoutOK with default headers values
func NewSessionLogoutOK() *SessionLogoutOK {
	return &SessionLogoutOK{}
}

/*SessionLogoutOK handles this case with default header values.

A successful response.
*/
type SessionLogoutOK struct {
	Payload models.AccountLogoutReply
}

func (o *SessionLogoutOK) Error() string {
	return fmt.Sprintf("[DELETE /v1/account/logout][%d] sessionLogoutOK  %+v", 200, o.Payload)
}

func (o *SessionLogoutOK) GetPayload() models.AccountLogoutReply {
	return o.Payload
}

func (o *SessionLogoutOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSessionLogoutBadRequest creates a SessionLogoutBadRequest with default headers values
func NewSessionLogoutBadRequest() *SessionLogoutBadRequest {
	return &SessionLogoutBadRequest{}
}

/*SessionLogoutBadRequest handles this case with default header values.

Validation error
*/
type SessionLogoutBadRequest struct {
	Payload *models.CommonErrorWithFields
}

func (o *SessionLogoutBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /v1/account/logout][%d] sessionLogoutBadRequest  %+v", 400, o.Payload)
}

func (o *SessionLogoutBadRequest) GetPayload() *models.CommonErrorWithFields {
	return o.Payload
}

func (o *SessionLogoutBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonErrorWithFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSessionLogoutForbidden creates a SessionLogoutForbidden with default headers values
func NewSessionLogoutForbidden() *SessionLogoutForbidden {
	return &SessionLogoutForbidden{}
}

/*SessionLogoutForbidden handles this case with default header values.

Returned when the user does not have permission to access the resource.
*/
type SessionLogoutForbidden struct {
	Payload *models.CommonError
}

func (o *SessionLogoutForbidden) Error() string {
	return fmt.Sprintf("[DELETE /v1/account/logout][%d] sessionLogoutForbidden  %+v", 403, o.Payload)
}

func (o *SessionLogoutForbidden) GetPayload() *models.CommonError {
	return o.Payload
}

func (o *SessionLogoutForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSessionLogoutNotFound creates a SessionLogoutNotFound with default headers values
func NewSessionLogoutNotFound() *SessionLogoutNotFound {
	return &SessionLogoutNotFound{}
}

/*SessionLogoutNotFound handles this case with default header values.

Returned when the resource does not exist.
*/
type SessionLogoutNotFound struct {
	Payload *models.CommonError
}

func (o *SessionLogoutNotFound) Error() string {
	return fmt.Sprintf("[DELETE /v1/account/logout][%d] sessionLogoutNotFound  %+v", 404, o.Payload)
}

func (o *SessionLogoutNotFound) GetPayload() *models.CommonError {
	return o.Payload
}

func (o *SessionLogoutNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSessionLogoutDefault creates a SessionLogoutDefault with default headers values
func NewSessionLogoutDefault(code int) *SessionLogoutDefault {
	return &SessionLogoutDefault{
		_statusCode: code,
	}
}

/*SessionLogoutDefault handles this case with default header values.

An unexpected error response
*/
type SessionLogoutDefault struct {
	_statusCode int

	Payload *models.GatewayruntimeError
}

// Code gets the status code for the session logout default response
func (o *SessionLogoutDefault) Code() int {
	return o._statusCode
}

func (o *SessionLogoutDefault) Error() string {
	return fmt.Sprintf("[DELETE /v1/account/logout][%d] session_Logout default  %+v", o._statusCode, o.Payload)
}

func (o *SessionLogoutDefault) GetPayload() *models.GatewayruntimeError {
	return o.Payload
}

func (o *SessionLogoutDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GatewayruntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
