// Code generated by go-swagger; DO NOT EDIT.

package session

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/koyeb/koyeb-cli/pkg/gen/kclient/models"
)

// SessionLoginReader is a Reader for the SessionLogin structure.
type SessionLoginReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SessionLoginReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSessionLoginOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSessionLoginBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSessionLoginForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSessionLoginNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewSessionLoginDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewSessionLoginOK creates a SessionLoginOK with default headers values
func NewSessionLoginOK() *SessionLoginOK {
	return &SessionLoginOK{}
}

/*SessionLoginOK handles this case with default header values.

A successful response.
*/
type SessionLoginOK struct {
	Payload *models.AccountLoginReply
}

func (o *SessionLoginOK) Error() string {
	return fmt.Sprintf("[POST /v1/account/login][%d] sessionLoginOK  %+v", 200, o.Payload)
}

func (o *SessionLoginOK) GetPayload() *models.AccountLoginReply {
	return o.Payload
}

func (o *SessionLoginOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AccountLoginReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSessionLoginBadRequest creates a SessionLoginBadRequest with default headers values
func NewSessionLoginBadRequest() *SessionLoginBadRequest {
	return &SessionLoginBadRequest{}
}

/*SessionLoginBadRequest handles this case with default header values.

Validation error
*/
type SessionLoginBadRequest struct {
	Payload *models.CommonErrorWithFields
}

func (o *SessionLoginBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/account/login][%d] sessionLoginBadRequest  %+v", 400, o.Payload)
}

func (o *SessionLoginBadRequest) GetPayload() *models.CommonErrorWithFields {
	return o.Payload
}

func (o *SessionLoginBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonErrorWithFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSessionLoginForbidden creates a SessionLoginForbidden with default headers values
func NewSessionLoginForbidden() *SessionLoginForbidden {
	return &SessionLoginForbidden{}
}

/*SessionLoginForbidden handles this case with default header values.

Returned when the user does not have permission to access the resource.
*/
type SessionLoginForbidden struct {
	Payload *models.CommonError
}

func (o *SessionLoginForbidden) Error() string {
	return fmt.Sprintf("[POST /v1/account/login][%d] sessionLoginForbidden  %+v", 403, o.Payload)
}

func (o *SessionLoginForbidden) GetPayload() *models.CommonError {
	return o.Payload
}

func (o *SessionLoginForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSessionLoginNotFound creates a SessionLoginNotFound with default headers values
func NewSessionLoginNotFound() *SessionLoginNotFound {
	return &SessionLoginNotFound{}
}

/*SessionLoginNotFound handles this case with default header values.

Returned when the resource does not exist.
*/
type SessionLoginNotFound struct {
	Payload *models.CommonError
}

func (o *SessionLoginNotFound) Error() string {
	return fmt.Sprintf("[POST /v1/account/login][%d] sessionLoginNotFound  %+v", 404, o.Payload)
}

func (o *SessionLoginNotFound) GetPayload() *models.CommonError {
	return o.Payload
}

func (o *SessionLoginNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSessionLoginDefault creates a SessionLoginDefault with default headers values
func NewSessionLoginDefault(code int) *SessionLoginDefault {
	return &SessionLoginDefault{
		_statusCode: code,
	}
}

/*SessionLoginDefault handles this case with default header values.

An unexpected error response
*/
type SessionLoginDefault struct {
	_statusCode int

	Payload *models.GatewayruntimeError
}

// Code gets the status code for the session login default response
func (o *SessionLoginDefault) Code() int {
	return o._statusCode
}

func (o *SessionLoginDefault) Error() string {
	return fmt.Sprintf("[POST /v1/account/login][%d] session_Login default  %+v", o._statusCode, o.Payload)
}

func (o *SessionLoginDefault) GetPayload() *models.GatewayruntimeError {
	return o.Payload
}

func (o *SessionLoginDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GatewayruntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
