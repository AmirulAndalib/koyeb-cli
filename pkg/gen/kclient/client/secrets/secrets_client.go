// Code generated by go-swagger; DO NOT EDIT.

package secrets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new secrets API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for secrets API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	SecretsDeleteSecret(params *SecretsDeleteSecretParams, authInfo runtime.ClientAuthInfoWriter) (*SecretsDeleteSecretOK, error)

	SecretsGetSecret(params *SecretsGetSecretParams, authInfo runtime.ClientAuthInfoWriter) (*SecretsGetSecretOK, error)

	SecretsGetSecretActivities(params *SecretsGetSecretActivitiesParams, authInfo runtime.ClientAuthInfoWriter) (*SecretsGetSecretActivitiesOK, error)

	SecretsListSecrets(params *SecretsListSecretsParams, authInfo runtime.ClientAuthInfoWriter) (*SecretsListSecretsOK, error)

	SecretsNewSecret(params *SecretsNewSecretParams, authInfo runtime.ClientAuthInfoWriter) (*SecretsNewSecretOK, error)

	SecretsUpdateSecret(params *SecretsUpdateSecretParams, authInfo runtime.ClientAuthInfoWriter) (*SecretsUpdateSecretOK, error)

	SecretsUpdateSecret2(params *SecretsUpdateSecret2Params, authInfo runtime.ClientAuthInfoWriter) (*SecretsUpdateSecret2OK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  SecretsDeleteSecret secrets delete secret API
*/
func (a *Client) SecretsDeleteSecret(params *SecretsDeleteSecretParams, authInfo runtime.ClientAuthInfoWriter) (*SecretsDeleteSecretOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecretsDeleteSecretParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Secrets_DeleteSecret",
		Method:             "DELETE",
		PathPattern:        "/v1/secrets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SecretsDeleteSecretReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecretsDeleteSecretOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SecretsDeleteSecretDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SecretsGetSecret secrets get secret API
*/
func (a *Client) SecretsGetSecret(params *SecretsGetSecretParams, authInfo runtime.ClientAuthInfoWriter) (*SecretsGetSecretOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecretsGetSecretParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Secrets_GetSecret",
		Method:             "GET",
		PathPattern:        "/v1/secrets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SecretsGetSecretReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecretsGetSecretOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SecretsGetSecretDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SecretsGetSecretActivities views stack activities
*/
func (a *Client) SecretsGetSecretActivities(params *SecretsGetSecretActivitiesParams, authInfo runtime.ClientAuthInfoWriter) (*SecretsGetSecretActivitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecretsGetSecretActivitiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Secrets_GetSecretActivities",
		Method:             "GET",
		PathPattern:        "/v1/secrets/{id}/activities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SecretsGetSecretActivitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecretsGetSecretActivitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SecretsGetSecretActivitiesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SecretsListSecrets secrets list secrets API
*/
func (a *Client) SecretsListSecrets(params *SecretsListSecretsParams, authInfo runtime.ClientAuthInfoWriter) (*SecretsListSecretsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecretsListSecretsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Secrets_ListSecrets",
		Method:             "GET",
		PathPattern:        "/v1/secrets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SecretsListSecretsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecretsListSecretsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SecretsListSecretsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SecretsNewSecret secrets new secret API
*/
func (a *Client) SecretsNewSecret(params *SecretsNewSecretParams, authInfo runtime.ClientAuthInfoWriter) (*SecretsNewSecretOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecretsNewSecretParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Secrets_NewSecret",
		Method:             "POST",
		PathPattern:        "/v1/secrets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SecretsNewSecretReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecretsNewSecretOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SecretsNewSecretDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SecretsUpdateSecret secrets update secret API
*/
func (a *Client) SecretsUpdateSecret(params *SecretsUpdateSecretParams, authInfo runtime.ClientAuthInfoWriter) (*SecretsUpdateSecretOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecretsUpdateSecretParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Secrets_UpdateSecret",
		Method:             "PUT",
		PathPattern:        "/v1/secrets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SecretsUpdateSecretReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecretsUpdateSecretOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SecretsUpdateSecretDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SecretsUpdateSecret2 secrets update secret2 API
*/
func (a *Client) SecretsUpdateSecret2(params *SecretsUpdateSecret2Params, authInfo runtime.ClientAuthInfoWriter) (*SecretsUpdateSecret2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecretsUpdateSecret2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Secrets_UpdateSecret2",
		Method:             "PATCH",
		PathPattern:        "/v1/secrets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SecretsUpdateSecret2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecretsUpdateSecret2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SecretsUpdateSecret2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
