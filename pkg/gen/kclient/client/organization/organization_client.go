// Code generated by go-swagger; DO NOT EDIT.

package organization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new organization API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for organization API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	OrganizationGetOrganization(params *OrganizationGetOrganizationParams, authInfo runtime.ClientAuthInfoWriter) (*OrganizationGetOrganizationOK, error)

	OrganizationGithubInstallation(params *OrganizationGithubInstallationParams, authInfo runtime.ClientAuthInfoWriter) (*OrganizationGithubInstallationOK, error)

	OrganizationGithubInstallationCallback(params *OrganizationGithubInstallationCallbackParams, authInfo runtime.ClientAuthInfoWriter) (*OrganizationGithubInstallationCallbackOK, error)

	OrganizationGithubInstallationRepoList(params *OrganizationGithubInstallationRepoListParams, authInfo runtime.ClientAuthInfoWriter) (*OrganizationGithubInstallationRepoListOK, error)

	OrganizationUpdateOrganization(params *OrganizationUpdateOrganizationParams, authInfo runtime.ClientAuthInfoWriter) (*OrganizationUpdateOrganizationOK, error)

	OrganizationUpdateOrganization2(params *OrganizationUpdateOrganization2Params, authInfo runtime.ClientAuthInfoWriter) (*OrganizationUpdateOrganization2OK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  OrganizationGetOrganization gets organization
*/
func (a *Client) OrganizationGetOrganization(params *OrganizationGetOrganizationParams, authInfo runtime.ClientAuthInfoWriter) (*OrganizationGetOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrganizationGetOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "organization_GetOrganization",
		Method:             "GET",
		PathPattern:        "/v1/organizations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OrganizationGetOrganizationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrganizationGetOrganizationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*OrganizationGetOrganizationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  OrganizationGithubInstallation starts github installation
*/
func (a *Client) OrganizationGithubInstallation(params *OrganizationGithubInstallationParams, authInfo runtime.ClientAuthInfoWriter) (*OrganizationGithubInstallationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrganizationGithubInstallationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "organization_GithubInstallation",
		Method:             "GET",
		PathPattern:        "/v1/github/installation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OrganizationGithubInstallationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrganizationGithubInstallationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*OrganizationGithubInstallationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  OrganizationGithubInstallationCallback githubs callback for app installation
*/
func (a *Client) OrganizationGithubInstallationCallback(params *OrganizationGithubInstallationCallbackParams, authInfo runtime.ClientAuthInfoWriter) (*OrganizationGithubInstallationCallbackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrganizationGithubInstallationCallbackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "organization_GithubInstallationCallback",
		Method:             "POST",
		PathPattern:        "/v1/github/installation/callback",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OrganizationGithubInstallationCallbackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrganizationGithubInstallationCallbackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*OrganizationGithubInstallationCallbackDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  OrganizationGithubInstallationRepoList lists github repos of the organization
*/
func (a *Client) OrganizationGithubInstallationRepoList(params *OrganizationGithubInstallationRepoListParams, authInfo runtime.ClientAuthInfoWriter) (*OrganizationGithubInstallationRepoListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrganizationGithubInstallationRepoListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "organization_GithubInstallationRepoList",
		Method:             "GET",
		PathPattern:        "/v1/github/installation/repositories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OrganizationGithubInstallationRepoListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrganizationGithubInstallationRepoListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*OrganizationGithubInstallationRepoListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  OrganizationUpdateOrganization updates organization
*/
func (a *Client) OrganizationUpdateOrganization(params *OrganizationUpdateOrganizationParams, authInfo runtime.ClientAuthInfoWriter) (*OrganizationUpdateOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrganizationUpdateOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "organization_UpdateOrganization",
		Method:             "PUT",
		PathPattern:        "/v1/organizations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OrganizationUpdateOrganizationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrganizationUpdateOrganizationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*OrganizationUpdateOrganizationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  OrganizationUpdateOrganization2 updates organization
*/
func (a *Client) OrganizationUpdateOrganization2(params *OrganizationUpdateOrganization2Params, authInfo runtime.ClientAuthInfoWriter) (*OrganizationUpdateOrganization2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrganizationUpdateOrganization2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "organization_UpdateOrganization2",
		Method:             "PATCH",
		PathPattern:        "/v1/organizations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OrganizationUpdateOrganization2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrganizationUpdateOrganization2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*OrganizationUpdateOrganization2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
