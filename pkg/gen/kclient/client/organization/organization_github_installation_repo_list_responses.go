// Code generated by go-swagger; DO NOT EDIT.

package organization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/koyeb/koyeb-cli/pkg/gen/kclient/models"
)

// OrganizationGithubInstallationRepoListReader is a Reader for the OrganizationGithubInstallationRepoList structure.
type OrganizationGithubInstallationRepoListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *OrganizationGithubInstallationRepoListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewOrganizationGithubInstallationRepoListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewOrganizationGithubInstallationRepoListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewOrganizationGithubInstallationRepoListForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewOrganizationGithubInstallationRepoListNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewOrganizationGithubInstallationRepoListDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewOrganizationGithubInstallationRepoListOK creates a OrganizationGithubInstallationRepoListOK with default headers values
func NewOrganizationGithubInstallationRepoListOK() *OrganizationGithubInstallationRepoListOK {
	return &OrganizationGithubInstallationRepoListOK{}
}

/*OrganizationGithubInstallationRepoListOK handles this case with default header values.

A successful response.
*/
type OrganizationGithubInstallationRepoListOK struct {
	Payload *models.AccountGithubInstallationRepoListReply
}

func (o *OrganizationGithubInstallationRepoListOK) Error() string {
	return fmt.Sprintf("[GET /v1/github/installation/repositories][%d] organizationGithubInstallationRepoListOK  %+v", 200, o.Payload)
}

func (o *OrganizationGithubInstallationRepoListOK) GetPayload() *models.AccountGithubInstallationRepoListReply {
	return o.Payload
}

func (o *OrganizationGithubInstallationRepoListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AccountGithubInstallationRepoListReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOrganizationGithubInstallationRepoListBadRequest creates a OrganizationGithubInstallationRepoListBadRequest with default headers values
func NewOrganizationGithubInstallationRepoListBadRequest() *OrganizationGithubInstallationRepoListBadRequest {
	return &OrganizationGithubInstallationRepoListBadRequest{}
}

/*OrganizationGithubInstallationRepoListBadRequest handles this case with default header values.

Organization is not linked to a github organization
*/
type OrganizationGithubInstallationRepoListBadRequest struct {
	Payload *models.CommonError
}

func (o *OrganizationGithubInstallationRepoListBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/github/installation/repositories][%d] organizationGithubInstallationRepoListBadRequest  %+v", 400, o.Payload)
}

func (o *OrganizationGithubInstallationRepoListBadRequest) GetPayload() *models.CommonError {
	return o.Payload
}

func (o *OrganizationGithubInstallationRepoListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOrganizationGithubInstallationRepoListForbidden creates a OrganizationGithubInstallationRepoListForbidden with default headers values
func NewOrganizationGithubInstallationRepoListForbidden() *OrganizationGithubInstallationRepoListForbidden {
	return &OrganizationGithubInstallationRepoListForbidden{}
}

/*OrganizationGithubInstallationRepoListForbidden handles this case with default header values.

Returned when the user does not have permission to access the resource.
*/
type OrganizationGithubInstallationRepoListForbidden struct {
	Payload *models.CommonError
}

func (o *OrganizationGithubInstallationRepoListForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/github/installation/repositories][%d] organizationGithubInstallationRepoListForbidden  %+v", 403, o.Payload)
}

func (o *OrganizationGithubInstallationRepoListForbidden) GetPayload() *models.CommonError {
	return o.Payload
}

func (o *OrganizationGithubInstallationRepoListForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOrganizationGithubInstallationRepoListNotFound creates a OrganizationGithubInstallationRepoListNotFound with default headers values
func NewOrganizationGithubInstallationRepoListNotFound() *OrganizationGithubInstallationRepoListNotFound {
	return &OrganizationGithubInstallationRepoListNotFound{}
}

/*OrganizationGithubInstallationRepoListNotFound handles this case with default header values.

Returned when the resource does not exist.
*/
type OrganizationGithubInstallationRepoListNotFound struct {
	Payload *models.CommonError
}

func (o *OrganizationGithubInstallationRepoListNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/github/installation/repositories][%d] organizationGithubInstallationRepoListNotFound  %+v", 404, o.Payload)
}

func (o *OrganizationGithubInstallationRepoListNotFound) GetPayload() *models.CommonError {
	return o.Payload
}

func (o *OrganizationGithubInstallationRepoListNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOrganizationGithubInstallationRepoListDefault creates a OrganizationGithubInstallationRepoListDefault with default headers values
func NewOrganizationGithubInstallationRepoListDefault(code int) *OrganizationGithubInstallationRepoListDefault {
	return &OrganizationGithubInstallationRepoListDefault{
		_statusCode: code,
	}
}

/*OrganizationGithubInstallationRepoListDefault handles this case with default header values.

An unexpected error response
*/
type OrganizationGithubInstallationRepoListDefault struct {
	_statusCode int

	Payload *models.GatewayruntimeError
}

// Code gets the status code for the organization github installation repo list default response
func (o *OrganizationGithubInstallationRepoListDefault) Code() int {
	return o._statusCode
}

func (o *OrganizationGithubInstallationRepoListDefault) Error() string {
	return fmt.Sprintf("[GET /v1/github/installation/repositories][%d] organization_GithubInstallationRepoList default  %+v", o._statusCode, o.Payload)
}

func (o *OrganizationGithubInstallationRepoListDefault) GetPayload() *models.GatewayruntimeError {
	return o.Payload
}

func (o *OrganizationGithubInstallationRepoListDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GatewayruntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
