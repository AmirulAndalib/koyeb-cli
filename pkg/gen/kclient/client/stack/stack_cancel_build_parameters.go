// Code generated by go-swagger; DO NOT EDIT.

package stack

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewStackCancelBuildParams creates a new StackCancelBuildParams object
// with the default values initialized.
func NewStackCancelBuildParams() *StackCancelBuildParams {
	var ()
	return &StackCancelBuildParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewStackCancelBuildParamsWithTimeout creates a new StackCancelBuildParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewStackCancelBuildParamsWithTimeout(timeout time.Duration) *StackCancelBuildParams {
	var ()
	return &StackCancelBuildParams{

		timeout: timeout,
	}
}

// NewStackCancelBuildParamsWithContext creates a new StackCancelBuildParams object
// with the default values initialized, and the ability to set a context for a request
func NewStackCancelBuildParamsWithContext(ctx context.Context) *StackCancelBuildParams {
	var ()
	return &StackCancelBuildParams{

		Context: ctx,
	}
}

// NewStackCancelBuildParamsWithHTTPClient creates a new StackCancelBuildParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewStackCancelBuildParamsWithHTTPClient(client *http.Client) *StackCancelBuildParams {
	var ()
	return &StackCancelBuildParams{
		HTTPClient: client,
	}
}

/*StackCancelBuildParams contains all the parameters to send to the API endpoint
for the stack cancel build operation typically these are written to a http.Request
*/
type StackCancelBuildParams struct {

	/*Sha*/
	Sha string
	/*StackID*/
	StackID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the stack cancel build params
func (o *StackCancelBuildParams) WithTimeout(timeout time.Duration) *StackCancelBuildParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the stack cancel build params
func (o *StackCancelBuildParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the stack cancel build params
func (o *StackCancelBuildParams) WithContext(ctx context.Context) *StackCancelBuildParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the stack cancel build params
func (o *StackCancelBuildParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the stack cancel build params
func (o *StackCancelBuildParams) WithHTTPClient(client *http.Client) *StackCancelBuildParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the stack cancel build params
func (o *StackCancelBuildParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSha adds the sha to the stack cancel build params
func (o *StackCancelBuildParams) WithSha(sha string) *StackCancelBuildParams {
	o.SetSha(sha)
	return o
}

// SetSha adds the sha to the stack cancel build params
func (o *StackCancelBuildParams) SetSha(sha string) {
	o.Sha = sha
}

// WithStackID adds the stackID to the stack cancel build params
func (o *StackCancelBuildParams) WithStackID(stackID string) *StackCancelBuildParams {
	o.SetStackID(stackID)
	return o
}

// SetStackID adds the stackId to the stack cancel build params
func (o *StackCancelBuildParams) SetStackID(stackID string) {
	o.StackID = stackID
}

// WriteToRequest writes these params to a swagger request
func (o *StackCancelBuildParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param sha
	if err := r.SetPathParam("sha", o.Sha); err != nil {
		return err
	}

	// path param stack_id
	if err := r.SetPathParam("stack_id", o.StackID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
