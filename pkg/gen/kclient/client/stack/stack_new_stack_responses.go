// Code generated by go-swagger; DO NOT EDIT.

package stack

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/koyeb/koyeb-cli/pkg/gen/kclient/models"
)

// StackNewStackReader is a Reader for the StackNewStack structure.
type StackNewStackReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StackNewStackReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStackNewStackOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewStackNewStackBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewStackNewStackForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewStackNewStackNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewStackNewStackDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewStackNewStackOK creates a StackNewStackOK with default headers values
func NewStackNewStackOK() *StackNewStackOK {
	return &StackNewStackOK{}
}

/*StackNewStackOK handles this case with default header values.

A successful response.
*/
type StackNewStackOK struct {
	Payload *models.StorageNewStackReply
}

func (o *StackNewStackOK) Error() string {
	return fmt.Sprintf("[POST /v1/stacks][%d] stackNewStackOK  %+v", 200, o.Payload)
}

func (o *StackNewStackOK) GetPayload() *models.StorageNewStackReply {
	return o.Payload
}

func (o *StackNewStackOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StorageNewStackReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStackNewStackBadRequest creates a StackNewStackBadRequest with default headers values
func NewStackNewStackBadRequest() *StackNewStackBadRequest {
	return &StackNewStackBadRequest{}
}

/*StackNewStackBadRequest handles this case with default header values.

Validation error
*/
type StackNewStackBadRequest struct {
	Payload *models.CommonErrorWithFields
}

func (o *StackNewStackBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/stacks][%d] stackNewStackBadRequest  %+v", 400, o.Payload)
}

func (o *StackNewStackBadRequest) GetPayload() *models.CommonErrorWithFields {
	return o.Payload
}

func (o *StackNewStackBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonErrorWithFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStackNewStackForbidden creates a StackNewStackForbidden with default headers values
func NewStackNewStackForbidden() *StackNewStackForbidden {
	return &StackNewStackForbidden{}
}

/*StackNewStackForbidden handles this case with default header values.

Returned when the user does not have permission to access the resource.
*/
type StackNewStackForbidden struct {
	Payload *models.CommonError
}

func (o *StackNewStackForbidden) Error() string {
	return fmt.Sprintf("[POST /v1/stacks][%d] stackNewStackForbidden  %+v", 403, o.Payload)
}

func (o *StackNewStackForbidden) GetPayload() *models.CommonError {
	return o.Payload
}

func (o *StackNewStackForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStackNewStackNotFound creates a StackNewStackNotFound with default headers values
func NewStackNewStackNotFound() *StackNewStackNotFound {
	return &StackNewStackNotFound{}
}

/*StackNewStackNotFound handles this case with default header values.

Returned when the resource does not exist.
*/
type StackNewStackNotFound struct {
	Payload *models.CommonError
}

func (o *StackNewStackNotFound) Error() string {
	return fmt.Sprintf("[POST /v1/stacks][%d] stackNewStackNotFound  %+v", 404, o.Payload)
}

func (o *StackNewStackNotFound) GetPayload() *models.CommonError {
	return o.Payload
}

func (o *StackNewStackNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStackNewStackDefault creates a StackNewStackDefault with default headers values
func NewStackNewStackDefault(code int) *StackNewStackDefault {
	return &StackNewStackDefault{
		_statusCode: code,
	}
}

/*StackNewStackDefault handles this case with default header values.

An unexpected error response
*/
type StackNewStackDefault struct {
	_statusCode int

	Payload *models.GatewayruntimeError
}

// Code gets the status code for the stack new stack default response
func (o *StackNewStackDefault) Code() int {
	return o._statusCode
}

func (o *StackNewStackDefault) Error() string {
	return fmt.Sprintf("[POST /v1/stacks][%d] stack_NewStack default  %+v", o._statusCode, o.Payload)
}

func (o *StackNewStackDefault) GetPayload() *models.GatewayruntimeError {
	return o.Payload
}

func (o *StackNewStackDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GatewayruntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
