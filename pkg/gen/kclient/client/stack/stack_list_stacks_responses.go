// Code generated by go-swagger; DO NOT EDIT.

package stack

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/koyeb/koyeb-cli/pkg/gen/kclient/models"
)

// StackListStacksReader is a Reader for the StackListStacks structure.
type StackListStacksReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StackListStacksReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStackListStacksOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewStackListStacksBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewStackListStacksForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewStackListStacksNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewStackListStacksDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewStackListStacksOK creates a StackListStacksOK with default headers values
func NewStackListStacksOK() *StackListStacksOK {
	return &StackListStacksOK{}
}

/*StackListStacksOK handles this case with default header values.

A successful response.
*/
type StackListStacksOK struct {
	Payload *models.StorageListStacksReply
}

func (o *StackListStacksOK) Error() string {
	return fmt.Sprintf("[GET /v1/stacks][%d] stackListStacksOK  %+v", 200, o.Payload)
}

func (o *StackListStacksOK) GetPayload() *models.StorageListStacksReply {
	return o.Payload
}

func (o *StackListStacksOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StorageListStacksReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStackListStacksBadRequest creates a StackListStacksBadRequest with default headers values
func NewStackListStacksBadRequest() *StackListStacksBadRequest {
	return &StackListStacksBadRequest{}
}

/*StackListStacksBadRequest handles this case with default header values.

Validation error
*/
type StackListStacksBadRequest struct {
	Payload *models.CommonErrorWithFields
}

func (o *StackListStacksBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/stacks][%d] stackListStacksBadRequest  %+v", 400, o.Payload)
}

func (o *StackListStacksBadRequest) GetPayload() *models.CommonErrorWithFields {
	return o.Payload
}

func (o *StackListStacksBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonErrorWithFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStackListStacksForbidden creates a StackListStacksForbidden with default headers values
func NewStackListStacksForbidden() *StackListStacksForbidden {
	return &StackListStacksForbidden{}
}

/*StackListStacksForbidden handles this case with default header values.

Returned when the user does not have permission to access the resource.
*/
type StackListStacksForbidden struct {
	Payload *models.CommonError
}

func (o *StackListStacksForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/stacks][%d] stackListStacksForbidden  %+v", 403, o.Payload)
}

func (o *StackListStacksForbidden) GetPayload() *models.CommonError {
	return o.Payload
}

func (o *StackListStacksForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStackListStacksNotFound creates a StackListStacksNotFound with default headers values
func NewStackListStacksNotFound() *StackListStacksNotFound {
	return &StackListStacksNotFound{}
}

/*StackListStacksNotFound handles this case with default header values.

Returned when the resource does not exist.
*/
type StackListStacksNotFound struct {
	Payload *models.CommonError
}

func (o *StackListStacksNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/stacks][%d] stackListStacksNotFound  %+v", 404, o.Payload)
}

func (o *StackListStacksNotFound) GetPayload() *models.CommonError {
	return o.Payload
}

func (o *StackListStacksNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStackListStacksDefault creates a StackListStacksDefault with default headers values
func NewStackListStacksDefault(code int) *StackListStacksDefault {
	return &StackListStacksDefault{
		_statusCode: code,
	}
}

/*StackListStacksDefault handles this case with default header values.

An unexpected error response
*/
type StackListStacksDefault struct {
	_statusCode int

	Payload *models.GatewayruntimeError
}

// Code gets the status code for the stack list stacks default response
func (o *StackListStacksDefault) Code() int {
	return o._statusCode
}

func (o *StackListStacksDefault) Error() string {
	return fmt.Sprintf("[GET /v1/stacks][%d] stack_ListStacks default  %+v", o._statusCode, o.Payload)
}

func (o *StackListStacksDefault) GetPayload() *models.GatewayruntimeError {
	return o.Payload
}

func (o *StackListStacksDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GatewayruntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
