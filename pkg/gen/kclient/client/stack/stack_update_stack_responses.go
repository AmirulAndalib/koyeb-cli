// Code generated by go-swagger; DO NOT EDIT.

package stack

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/koyeb/koyeb-cli/pkg/gen/kclient/models"
)

// StackUpdateStackReader is a Reader for the StackUpdateStack structure.
type StackUpdateStackReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StackUpdateStackReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStackUpdateStackOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewStackUpdateStackBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewStackUpdateStackForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewStackUpdateStackNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewStackUpdateStackDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewStackUpdateStackOK creates a StackUpdateStackOK with default headers values
func NewStackUpdateStackOK() *StackUpdateStackOK {
	return &StackUpdateStackOK{}
}

/*StackUpdateStackOK handles this case with default header values.

A successful response.
*/
type StackUpdateStackOK struct {
	Payload *models.StorageUpdateStackReply
}

func (o *StackUpdateStackOK) Error() string {
	return fmt.Sprintf("[PUT /v1/stacks/{id}][%d] stackUpdateStackOK  %+v", 200, o.Payload)
}

func (o *StackUpdateStackOK) GetPayload() *models.StorageUpdateStackReply {
	return o.Payload
}

func (o *StackUpdateStackOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StorageUpdateStackReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStackUpdateStackBadRequest creates a StackUpdateStackBadRequest with default headers values
func NewStackUpdateStackBadRequest() *StackUpdateStackBadRequest {
	return &StackUpdateStackBadRequest{}
}

/*StackUpdateStackBadRequest handles this case with default header values.

Validation error
*/
type StackUpdateStackBadRequest struct {
	Payload *models.CommonErrorWithFields
}

func (o *StackUpdateStackBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/stacks/{id}][%d] stackUpdateStackBadRequest  %+v", 400, o.Payload)
}

func (o *StackUpdateStackBadRequest) GetPayload() *models.CommonErrorWithFields {
	return o.Payload
}

func (o *StackUpdateStackBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonErrorWithFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStackUpdateStackForbidden creates a StackUpdateStackForbidden with default headers values
func NewStackUpdateStackForbidden() *StackUpdateStackForbidden {
	return &StackUpdateStackForbidden{}
}

/*StackUpdateStackForbidden handles this case with default header values.

Returned when the user does not have permission to access the resource.
*/
type StackUpdateStackForbidden struct {
	Payload *models.CommonError
}

func (o *StackUpdateStackForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/stacks/{id}][%d] stackUpdateStackForbidden  %+v", 403, o.Payload)
}

func (o *StackUpdateStackForbidden) GetPayload() *models.CommonError {
	return o.Payload
}

func (o *StackUpdateStackForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStackUpdateStackNotFound creates a StackUpdateStackNotFound with default headers values
func NewStackUpdateStackNotFound() *StackUpdateStackNotFound {
	return &StackUpdateStackNotFound{}
}

/*StackUpdateStackNotFound handles this case with default header values.

Returned when the resource does not exist.
*/
type StackUpdateStackNotFound struct {
	Payload *models.CommonError
}

func (o *StackUpdateStackNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/stacks/{id}][%d] stackUpdateStackNotFound  %+v", 404, o.Payload)
}

func (o *StackUpdateStackNotFound) GetPayload() *models.CommonError {
	return o.Payload
}

func (o *StackUpdateStackNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStackUpdateStackDefault creates a StackUpdateStackDefault with default headers values
func NewStackUpdateStackDefault(code int) *StackUpdateStackDefault {
	return &StackUpdateStackDefault{
		_statusCode: code,
	}
}

/*StackUpdateStackDefault handles this case with default header values.

An unexpected error response
*/
type StackUpdateStackDefault struct {
	_statusCode int

	Payload *models.GatewayruntimeError
}

// Code gets the status code for the stack update stack default response
func (o *StackUpdateStackDefault) Code() int {
	return o._statusCode
}

func (o *StackUpdateStackDefault) Error() string {
	return fmt.Sprintf("[PUT /v1/stacks/{id}][%d] stack_UpdateStack default  %+v", o._statusCode, o.Payload)
}

func (o *StackUpdateStackDefault) GetPayload() *models.GatewayruntimeError {
	return o.Payload
}

func (o *StackUpdateStackDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GatewayruntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
