// Code generated by go-swagger; DO NOT EDIT.

package store

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/koyeb/koyeb-cli/pkg/gen/kclient/models"
)

// StoreUpdateStoreReader is a Reader for the StoreUpdateStore structure.
type StoreUpdateStoreReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StoreUpdateStoreReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStoreUpdateStoreOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewStoreUpdateStoreBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewStoreUpdateStoreForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewStoreUpdateStoreNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewStoreUpdateStoreDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewStoreUpdateStoreOK creates a StoreUpdateStoreOK with default headers values
func NewStoreUpdateStoreOK() *StoreUpdateStoreOK {
	return &StoreUpdateStoreOK{}
}

/*StoreUpdateStoreOK handles this case with default header values.

A successful response.
*/
type StoreUpdateStoreOK struct {
	Payload *models.StorageStoreReply
}

func (o *StoreUpdateStoreOK) Error() string {
	return fmt.Sprintf("[PUT /v1/stores/{id}][%d] storeUpdateStoreOK  %+v", 200, o.Payload)
}

func (o *StoreUpdateStoreOK) GetPayload() *models.StorageStoreReply {
	return o.Payload
}

func (o *StoreUpdateStoreOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StorageStoreReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStoreUpdateStoreBadRequest creates a StoreUpdateStoreBadRequest with default headers values
func NewStoreUpdateStoreBadRequest() *StoreUpdateStoreBadRequest {
	return &StoreUpdateStoreBadRequest{}
}

/*StoreUpdateStoreBadRequest handles this case with default header values.

Validation error
*/
type StoreUpdateStoreBadRequest struct {
	Payload *models.CommonErrorWithFields
}

func (o *StoreUpdateStoreBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/stores/{id}][%d] storeUpdateStoreBadRequest  %+v", 400, o.Payload)
}

func (o *StoreUpdateStoreBadRequest) GetPayload() *models.CommonErrorWithFields {
	return o.Payload
}

func (o *StoreUpdateStoreBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonErrorWithFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStoreUpdateStoreForbidden creates a StoreUpdateStoreForbidden with default headers values
func NewStoreUpdateStoreForbidden() *StoreUpdateStoreForbidden {
	return &StoreUpdateStoreForbidden{}
}

/*StoreUpdateStoreForbidden handles this case with default header values.

Returned when the user does not have permission to access the resource.
*/
type StoreUpdateStoreForbidden struct {
	Payload *models.CommonError
}

func (o *StoreUpdateStoreForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/stores/{id}][%d] storeUpdateStoreForbidden  %+v", 403, o.Payload)
}

func (o *StoreUpdateStoreForbidden) GetPayload() *models.CommonError {
	return o.Payload
}

func (o *StoreUpdateStoreForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStoreUpdateStoreNotFound creates a StoreUpdateStoreNotFound with default headers values
func NewStoreUpdateStoreNotFound() *StoreUpdateStoreNotFound {
	return &StoreUpdateStoreNotFound{}
}

/*StoreUpdateStoreNotFound handles this case with default header values.

Returned when the resource does not exist.
*/
type StoreUpdateStoreNotFound struct {
	Payload *models.CommonError
}

func (o *StoreUpdateStoreNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/stores/{id}][%d] storeUpdateStoreNotFound  %+v", 404, o.Payload)
}

func (o *StoreUpdateStoreNotFound) GetPayload() *models.CommonError {
	return o.Payload
}

func (o *StoreUpdateStoreNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStoreUpdateStoreDefault creates a StoreUpdateStoreDefault with default headers values
func NewStoreUpdateStoreDefault(code int) *StoreUpdateStoreDefault {
	return &StoreUpdateStoreDefault{
		_statusCode: code,
	}
}

/*StoreUpdateStoreDefault handles this case with default header values.

An unexpected error response
*/
type StoreUpdateStoreDefault struct {
	_statusCode int

	Payload *models.GatewayruntimeError
}

// Code gets the status code for the store update store default response
func (o *StoreUpdateStoreDefault) Code() int {
	return o._statusCode
}

func (o *StoreUpdateStoreDefault) Error() string {
	return fmt.Sprintf("[PUT /v1/stores/{id}][%d] store_UpdateStore default  %+v", o._statusCode, o.Payload)
}

func (o *StoreUpdateStoreDefault) GetPayload() *models.GatewayruntimeError {
	return o.Payload
}

func (o *StoreUpdateStoreDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GatewayruntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
