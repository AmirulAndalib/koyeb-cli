// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// StorageFunctionParameterType - UNKNOWN: Only used for error handling
//  - STORE_REF: A reference to an existing store
//  - SECRET_REF: A reference to an existing secret
//
// swagger:model storageFunctionParameterType
type StorageFunctionParameterType string

const (

	// StorageFunctionParameterTypeUNKNOWN captures enum value "UNKNOWN"
	StorageFunctionParameterTypeUNKNOWN StorageFunctionParameterType = "UNKNOWN"

	// StorageFunctionParameterTypeSTOREREF captures enum value "STORE_REF"
	StorageFunctionParameterTypeSTOREREF StorageFunctionParameterType = "STORE_REF"

	// StorageFunctionParameterTypeSECRETREF captures enum value "SECRET_REF"
	StorageFunctionParameterTypeSECRETREF StorageFunctionParameterType = "SECRET_REF"

	// StorageFunctionParameterTypeSTRING captures enum value "STRING"
	StorageFunctionParameterTypeSTRING StorageFunctionParameterType = "STRING"

	// StorageFunctionParameterTypeNUMBER captures enum value "NUMBER"
	StorageFunctionParameterTypeNUMBER StorageFunctionParameterType = "NUMBER"

	// StorageFunctionParameterTypeBOOLEAN captures enum value "BOOLEAN"
	StorageFunctionParameterTypeBOOLEAN StorageFunctionParameterType = "BOOLEAN"
)

// for schema
var storageFunctionParameterTypeEnum []interface{}

func init() {
	var res []StorageFunctionParameterType
	if err := json.Unmarshal([]byte(`["UNKNOWN","STORE_REF","SECRET_REF","STRING","NUMBER","BOOLEAN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageFunctionParameterTypeEnum = append(storageFunctionParameterTypeEnum, v)
	}
}

func (m StorageFunctionParameterType) validateStorageFunctionParameterTypeEnum(path, location string, value StorageFunctionParameterType) error {
	if err := validate.Enum(path, location, value, storageFunctionParameterTypeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this storage function parameter type
func (m StorageFunctionParameterType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateStorageFunctionParameterTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
