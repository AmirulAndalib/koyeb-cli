// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StorageFunctionExecution storage function execution
//
// swagger:model storageFunctionExecution
type StorageFunctionExecution struct {

	// The possibly empty time at which this function stopped
	// Format: date-time
	End strfmt.DateTime `json:"end,omitempty"`

	// The exitCode of the run, it will be -1 if it's meaningless (.e.g. STARTING, RUNNING states), this only makes sense if the state is FAILED or SUCCEEDED (succeeded will always be 0)
	ExitCode int32 `json:"exitCode,omitempty"`

	// The possibly empty time at which this function started
	// Format: date-time
	Start strfmt.DateTime `json:"start,omitempty"`

	// state
	State FunctionRunInfoState `json:"state,omitempty"`
}

// Validate validates this storage function execution
func (m *StorageFunctionExecution) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageFunctionExecution) validateEnd(formats strfmt.Registry) error {

	if swag.IsZero(m.End) { // not required
		return nil
	}

	if err := validate.FormatOf("end", "body", "date-time", m.End.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *StorageFunctionExecution) validateStart(formats strfmt.Registry) error {

	if swag.IsZero(m.Start) { // not required
		return nil
	}

	if err := validate.FormatOf("start", "body", "date-time", m.Start.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *StorageFunctionExecution) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	if err := m.State.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("state")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StorageFunctionExecution) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageFunctionExecution) UnmarshalBinary(b []byte) error {
	var res StorageFunctionExecution
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
