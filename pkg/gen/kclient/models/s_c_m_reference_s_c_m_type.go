// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SCMReferenceSCMType s c m reference s c m type
//
// swagger:model SCMReferenceSCMType
type SCMReferenceSCMType string

const (

	// SCMReferenceSCMTypeGITHUB captures enum value "GITHUB"
	SCMReferenceSCMTypeGITHUB SCMReferenceSCMType = "GITHUB"

	// SCMReferenceSCMTypeUNKNOWN captures enum value "UNKNOWN"
	SCMReferenceSCMTypeUNKNOWN SCMReferenceSCMType = "UNKNOWN"
)

// for schema
var sCMReferenceSCMTypeEnum []interface{}

func init() {
	var res []SCMReferenceSCMType
	if err := json.Unmarshal([]byte(`["GITHUB","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sCMReferenceSCMTypeEnum = append(sCMReferenceSCMTypeEnum, v)
	}
}

func (m SCMReferenceSCMType) validateSCMReferenceSCMTypeEnum(path, location string, value SCMReferenceSCMType) error {
	if err := validate.Enum(path, location, value, sCMReferenceSCMTypeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this s c m reference s c m type
func (m SCMReferenceSCMType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSCMReferenceSCMTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
