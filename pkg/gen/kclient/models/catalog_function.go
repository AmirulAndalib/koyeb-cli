// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CatalogFunction Catalog function
//
// A function pre-written in a reusable way and maintained by the community. To see a list of existing ones checkout the [function catalog](https://www.koyeb.com/catalog?refinementList[type][0]=function). Interested in adding one? Go to the [koyeb-community github org](https://github.com/koyeb-community).
//
// swagger:model catalogFunction
type CatalogFunction struct {
	BaseFunction

	// The name and version of the function from the catalog in the format `fnName@version`. To find functions check the [function catalog](https://www.koyeb.com/catalog?refinementList[type][0]=function)
	// Required: true
	Use *string `json:"use"`

	// An object setting the options of a function from the catalog. To see available options check the documentation in the function catalog.
	With interface{} `json:"with,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *CatalogFunction) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 BaseFunction
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.BaseFunction = aO0

	// AO1
	var dataAO1 struct {
		Use *string `json:"use"`

		With interface{} `json:"with,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Use = dataAO1.Use

	m.With = dataAO1.With

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m CatalogFunction) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.BaseFunction)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Use *string `json:"use"`

		With interface{} `json:"with,omitempty"`
	}

	dataAO1.Use = m.Use

	dataAO1.With = m.With

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this catalog function
func (m *CatalogFunction) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with BaseFunction
	if err := m.BaseFunction.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUse(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CatalogFunction) validateUse(formats strfmt.Registry) error {

	if err := validate.Required("use", "body", m.Use); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CatalogFunction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CatalogFunction) UnmarshalBinary(b []byte) error {
	var res CatalogFunction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
