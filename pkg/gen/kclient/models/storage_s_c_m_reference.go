// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StorageSCMReference storage s c m reference
//
// swagger:model storageSCMReference
type StorageSCMReference struct {

	// A git ref to identify the data that needs to be taken from the repo (it can be a commit, a tag, a branch...)
	Ref string `json:"ref,omitempty"`

	// A way to identify the repository within the git provider
	Repo string `json:"repo,omitempty"`

	// The place where the repository is hosted (github is the only supported place at the moment)
	Type SCMReferenceSCMType `json:"type,omitempty"`
}

// Validate validates this storage s c m reference
func (m *StorageSCMReference) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageSCMReference) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StorageSCMReference) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageSCMReference) UnmarshalBinary(b []byte) error {
	var res StorageSCMReference
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
