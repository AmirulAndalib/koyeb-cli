// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// StorageBaseCatalogStatus The status of a catalog entry
//
// swagger:model storageBaseCatalogStatus
type StorageBaseCatalogStatus string

const (

	// StorageBaseCatalogStatusCOMINGSOON captures enum value "COMING_SOON"
	StorageBaseCatalogStatusCOMINGSOON StorageBaseCatalogStatus = "COMING_SOON"

	// StorageBaseCatalogStatusACTIVE captures enum value "ACTIVE"
	StorageBaseCatalogStatusACTIVE StorageBaseCatalogStatus = "ACTIVE"

	// StorageBaseCatalogStatusDEPRECATED captures enum value "DEPRECATED"
	StorageBaseCatalogStatusDEPRECATED StorageBaseCatalogStatus = "DEPRECATED"

	// StorageBaseCatalogStatusDISABLED captures enum value "DISABLED"
	StorageBaseCatalogStatusDISABLED StorageBaseCatalogStatus = "DISABLED"

	// StorageBaseCatalogStatusUNKNOWN captures enum value "UNKNOWN"
	StorageBaseCatalogStatusUNKNOWN StorageBaseCatalogStatus = "UNKNOWN"
)

// for schema
var storageBaseCatalogStatusEnum []interface{}

func init() {
	var res []StorageBaseCatalogStatus
	if err := json.Unmarshal([]byte(`["COMING_SOON","ACTIVE","DEPRECATED","DISABLED","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageBaseCatalogStatusEnum = append(storageBaseCatalogStatusEnum, v)
	}
}

func (m StorageBaseCatalogStatus) validateStorageBaseCatalogStatusEnum(path, location string, value StorageBaseCatalogStatus) error {
	if err := validate.Enum(path, location, value, storageBaseCatalogStatusEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this storage base catalog status
func (m StorageBaseCatalogStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateStorageBaseCatalogStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
