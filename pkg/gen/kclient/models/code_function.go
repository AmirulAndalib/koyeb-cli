// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CodeFunction Code function
//
// swagger:model codeFunction
type CodeFunction struct {
	BaseFunction

	// handler
	Handler string `json:"handler,omitempty"`

	// path
	Path string `json:"path,omitempty"`

	// The runtime to use, to find supported runtimes check the [stack doc.](https://www.koyeb.com/docs/stacks/quickstart)
	// Required: true
	Runtime *string `json:"runtime"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *CodeFunction) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 BaseFunction
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.BaseFunction = aO0

	// AO1
	var dataAO1 struct {
		Handler string `json:"handler,omitempty"`

		Path string `json:"path,omitempty"`

		Runtime *string `json:"runtime"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Handler = dataAO1.Handler

	m.Path = dataAO1.Path

	m.Runtime = dataAO1.Runtime

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m CodeFunction) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.BaseFunction)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Handler string `json:"handler,omitempty"`

		Path string `json:"path,omitempty"`

		Runtime *string `json:"runtime"`
	}

	dataAO1.Handler = m.Handler

	dataAO1.Path = m.Path

	dataAO1.Runtime = m.Runtime

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this code function
func (m *CodeFunction) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with BaseFunction
	if err := m.BaseFunction.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuntime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CodeFunction) validateRuntime(formats strfmt.Registry) error {

	if err := validate.Required("runtime", "body", m.Runtime); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CodeFunction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CodeFunction) UnmarshalBinary(b []byte) error {
	var res CodeFunction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
