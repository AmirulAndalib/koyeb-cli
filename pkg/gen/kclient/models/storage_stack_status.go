// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// StorageStackStatus - UNKNOWN: This shouldn't happen but for API completion
//  - DRAINING: The stack is getting deleted
//  - PROVISIONING: A stack is starting up but doesn't have a deployed revision yet
//  - ACTIVE: Everything is ok
//  - ERROR: There's no active release and recent releases have failed
//  - WARNING: There's an active release, however the most recent release is unhealthy
//  - DEPLOYING: There's an active release, and we're deploying a newer release
//
// swagger:model storageStackStatus
type StorageStackStatus string

const (

	// StorageStackStatusUNKNOWN captures enum value "UNKNOWN"
	StorageStackStatusUNKNOWN StorageStackStatus = "UNKNOWN"

	// StorageStackStatusDRAINING captures enum value "DRAINING"
	StorageStackStatusDRAINING StorageStackStatus = "DRAINING"

	// StorageStackStatusPROVISIONING captures enum value "PROVISIONING"
	StorageStackStatusPROVISIONING StorageStackStatus = "PROVISIONING"

	// StorageStackStatusACTIVE captures enum value "ACTIVE"
	StorageStackStatusACTIVE StorageStackStatus = "ACTIVE"

	// StorageStackStatusERROR captures enum value "ERROR"
	StorageStackStatusERROR StorageStackStatus = "ERROR"

	// StorageStackStatusWARNING captures enum value "WARNING"
	StorageStackStatusWARNING StorageStackStatus = "WARNING"

	// StorageStackStatusDEPLOYING captures enum value "DEPLOYING"
	StorageStackStatusDEPLOYING StorageStackStatus = "DEPLOYING"
)

// for schema
var storageStackStatusEnum []interface{}

func init() {
	var res []StorageStackStatus
	if err := json.Unmarshal([]byte(`["UNKNOWN","DRAINING","PROVISIONING","ACTIVE","ERROR","WARNING","DEPLOYING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageStackStatusEnum = append(storageStackStatusEnum, v)
	}
}

func (m StorageStackStatus) validateStorageStackStatusEnum(path, location string, value StorageStackStatus) error {
	if err := validate.Enum(path, location, value, storageStackStatusEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this storage stack status
func (m StorageStackStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateStorageStackStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
