// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StoreOldEvent Legacy Advanced store event registration
//
// swagger:model storeOldEvent
type StoreOldEvent struct {

	// store
	// Required: true
	Store *StoreOldEventStore `json:"store"`
}

// Validate validates this store old event
func (m *StoreOldEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStore(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StoreOldEvent) validateStore(formats strfmt.Registry) error {

	if err := validate.Required("store", "body", m.Store); err != nil {
		return err
	}

	if m.Store != nil {
		if err := m.Store.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("store")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StoreOldEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StoreOldEvent) UnmarshalBinary(b []byte) error {
	var res StoreOldEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StoreOldEventStore store old event store
//
// swagger:model StoreOldEventStore
type StoreOldEventStore struct {

	// Event type
	Event string `json:"event,omitempty"`

	// Store name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this store old event store
func (m *StoreOldEventStore) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StoreOldEventStore) validateName(formats strfmt.Registry) error {

	if err := validate.Required("store"+"."+"name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StoreOldEventStore) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StoreOldEventStore) UnmarshalBinary(b []byte) error {
	var res StoreOldEventStore
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
