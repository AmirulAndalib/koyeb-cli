// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DockerFunction Docker function
//
// swagger:model dockerFunction
type DockerFunction struct {
	BaseFunction

	// A list of arguments to pass to `command`
	Args []string `json:"args"`

	// A command to execute inside the container
	Command interface{} `json:"command,omitempty"`

	// The reference to the docker image to use for this function
	// Required: true
	Image *string `json:"image"`

	// The reference to a Koyeb secret that contains the secret to access to docker-registry the image lives in (only necessary for private Docker image registries)
	ImageRegistrySecret string `json:"image_registry_secret,omitempty"`

	// The name of the function
	// Required: true
	Name *string `json:"name"`

	// How to set the cwd on function execution
	WorkingDir string `json:"working_dir,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *DockerFunction) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 BaseFunction
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.BaseFunction = aO0

	// AO1
	var dataAO1 struct {
		Args []string `json:"args"`

		Command interface{} `json:"command,omitempty"`

		Image *string `json:"image"`

		ImageRegistrySecret string `json:"image_registry_secret,omitempty"`

		Name *string `json:"name"`

		WorkingDir string `json:"working_dir,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Args = dataAO1.Args

	m.Command = dataAO1.Command

	m.Image = dataAO1.Image

	m.ImageRegistrySecret = dataAO1.ImageRegistrySecret

	m.Name = dataAO1.Name

	m.WorkingDir = dataAO1.WorkingDir

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m DockerFunction) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.BaseFunction)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Args []string `json:"args"`

		Command interface{} `json:"command,omitempty"`

		Image *string `json:"image"`

		ImageRegistrySecret string `json:"image_registry_secret,omitempty"`

		Name *string `json:"name"`

		WorkingDir string `json:"working_dir,omitempty"`
	}

	dataAO1.Args = m.Args

	dataAO1.Command = m.Command

	dataAO1.Image = m.Image

	dataAO1.ImageRegistrySecret = m.ImageRegistrySecret

	dataAO1.Name = m.Name

	dataAO1.WorkingDir = m.WorkingDir

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this docker function
func (m *DockerFunction) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with BaseFunction
	if err := m.BaseFunction.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DockerFunction) validateImage(formats strfmt.Registry) error {

	if err := validate.Required("image", "body", m.Image); err != nil {
		return err
	}

	return nil
}

func (m *DockerFunction) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DockerFunction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DockerFunction) UnmarshalBinary(b []byte) error {
	var res DockerFunction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
