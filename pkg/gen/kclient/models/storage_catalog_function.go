// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StorageCatalogFunction storage catalog function
//
// swagger:model storageCatalogFunction
type StorageCatalogFunction struct {

	// A longer description of the stack akin to a README in markdown
	Description string `json:"description,omitempty"`

	// A display name for a stack
	DisplayName string `json:"display_name,omitempty"`

	// An optional url to an icon for this stack (What file format?!)
	Icon string `json:"icon,omitempty"`

	// The image this function will use
	Image string `json:"image,omitempty"`

	// The name of the tag in a slug valid format
	Name string `json:"name,omitempty"`

	// A list of parameters for the function
	Parameters []*StorageFunctionParameter `json:"parameters"`

	// An short description of the stack (<140 characters)
	ShortDescription string `json:"short_description,omitempty"`

	// The current status on the stack catalog
	Status StorageBaseCatalogStatus `json:"status,omitempty"`

	// A set of tags to identify the catalog
	Tags []string `json:"tags"`

	// The template that is used for expanding a catalog function
	Template string `json:"template,omitempty"`

	// The version of the function in semver format: https://semver.org/
	Version string `json:"version,omitempty"`

	// The website to get more info about this function (for example the source code)
	Website string `json:"website,omitempty"`
}

// Validate validates this storage catalog function
func (m *StorageCatalogFunction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageCatalogFunction) validateParameters(formats strfmt.Registry) error {

	if swag.IsZero(m.Parameters) { // not required
		return nil
	}

	for i := 0; i < len(m.Parameters); i++ {
		if swag.IsZero(m.Parameters[i]) { // not required
			continue
		}

		if m.Parameters[i] != nil {
			if err := m.Parameters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StorageCatalogFunction) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StorageCatalogFunction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageCatalogFunction) UnmarshalBinary(b []byte) error {
	var res StorageCatalogFunction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
